{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7248\u672c\u4fe1\u606f Created by \u5b59\u94f8 2019-06-28 16:23 Version 1.0.1 Last Update\uff1a2019-08-12 14:32 \u589e\u52a0\u5206\u7ea7\u5bfc\u822a; OpenCV \u00b6 OpenCV \u57f9\u8bad OpenCV Cheatsheet OpenCV \u5e38\u7528\u7a0b\u5e8f(\u4e00) Deep Learning \u00b6 Classification \u63a5\u53e3","title":"\u4e3b\u9875"},{"location":"#opencv","text":"OpenCV \u57f9\u8bad OpenCV Cheatsheet OpenCV \u5e38\u7528\u7a0b\u5e8f(\u4e00)","title":"OpenCV"},{"location":"#deep-learning","text":"Classification \u63a5\u53e3","title":"Deep Learning"},{"location":"2019_summer/opencv/cheatsheet/","text":"OpenCV CheatSheet \u00b6 \u57fa\u672c\u8f93\u5165\u8f93\u51fa \u00b6 \u56fe\u50cf\u8bfb\\\u5199 \u00b6 # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( filename ) image = cv2 . imread ( filename , cv2 . CV_LOAD_IMAGE_GRAYSCALE ) # \u56fe\u50cf\u4fdd\u5b58 cv2 . imwrite ( filename , image ) \u89c6\u9891\u8bfb\\\u5199 \u00b6 # \u89c6\u9891\u8bfb\u5165 cameraCapture = cv2 . VideoCapture ( 0 ) # \u521b\u5efa\u89c6\u9891\u6d41\u5bf9\u8c61 cameraCapture = cv2 . VideoCapture ( filename ) cameraCapture = cv2 . VideoCapture ( url ) success , frame = cameraCapture . read () # \u9010\u5e27\u8bfb\u5165\u89c6\u9891\u5e27 # \u89c6\u9891\u4fdd\u5b58 fourcc = cv2 . VideoWriter_fourcc ( c1 , c2 , c3 , c4 ) # videoWriter = cv2 . VideoWriter ( filename , fourcc , fps , frameSize ) # \u89c6\u9891\u4fdd\u5b58\u914d\u7f6e \u56fe\u50cf\u663e\u793a \u00b6 # \u521b\u5efa\u663e\u793a\u7a97\u53e3 cv2 . namedWindow ( winname ) cv2 . namedWindow ( winname , flags ) # \u663e\u793a\u56fe\u50cf cv . imshow ( winname , mat ) # \u56fe\u50cf\u663e\u793a\u65f6\u957f cv2 . waitKey () # \u8868\u793a\u7b49\u5f85\u7528\u6237\u64cd\u4f5c. cv2 . waitKey ( delay ) # delay\u4e3a\u505c\u987f\u6beb\u79d2\u6570. 0\u8868\u793a\u7b49\u5f85\u7528\u6237\u64cd\u4f5c. \u57fa\u7840\u56fe\u50cf\u5904\u7406 \u00b6 \u521b\u5efa\u56fe\u50cf\u77e9\u9635 \u00b6 img = numpy . zeros (( height , width , channels ), numpy . uint8 ) img = numpy . zeros_like ( src_img ) \u56fe\u50cf\u77e9\u9635\u6570\u503c\u64cd\u4f5c \u00b6 img [ x , y , z ] = [ v1 , v2 , v3 ] img_cp = img . copy () # \u56fe\u50cf\u590d\u5236 \u56fe\u50cf\u8272\u5f69\u7a7a\u95f4\u53d8\u6362 \u00b6 dst_img = cv2 . cvtColor ( src_img , flags ) dst_img = cv2 . cvtColor ( src_img , cv2 . COLOR_BGR2GRAY ) # BGR\u8f6c\u4e3a\u7070\u5ea6 \u51e0\u4f55\u53d8\u6362 \u00b6 # \u56fe\u50cf\u7f29\u653e dst_img = cv2 . resize ( src_img ,( height , width )) # \u5782\u76f4\u7ffb\u8f6c dst_img = cv2 . flip ( src_img , 0 ) # \u6c34\u5e73\u7ffb\u8f6c dst_img = cv2 . filp ( src_img , - 1 ) # \u4eff\u5c04\u53d8\u6362(\u5e73\u79fb,\u7f29\u653e,\u65cb\u8f6c) M = np . float32 ([[ M11 , M12 , M13 ],[ M21 , M22 , M23 ],[ 0 , 0 , 1 ]]) dst_img = cv2 . warpAffine ( src_img , M ,( height , width )) \u56fe\u50cf\u5206\u6790 \u00b6 # \u56fe\u50cf\u5206\u5272 ret , dst_img = cv2 . threshold ( src_img , th , val , flags ) ret , dst_img = cv2 . threshold ( src_img , th , val , cv2 . THRESH_BINARY ) # \u8fb9\u7f18\u68c0\u6d4b dst_img = cv2 . Canny ( src_img , th1 , th2 ) dst_img = cv2 . Canny ( src_img , th1 , th2 , apertureSize , L2gradient ) # Hough\u53d8\u6362 lines = cv2 . HoughLines ( src_img , 1 , np . pi / 180 , 100 ) lines = cv2 . HoughLines ( src_img , rho , theta , th , min_theta , max_theta ) lines = cv2 . HoughLinesP ( src_img , 1 , np . pi / 180 , 100 , 100 , 20 ) lines = cv2 . HoughLinesP ( src_img , rho , theta , th , minLineLength , maxLineGap ) \u56fe\u50cf\u7ed8\u5236 \u00b6 # \u7ed8\u5236\u76f4\u7ebf cv2 . line ( img , pt1 , pt2 , color , thickness ) # pt1\u4e3a\u8d77\u70b9,pt2\u4e3a\u7ec8\u70b9 # \u7ed8\u5236\u77e9\u5f62 cv2 . rectangle ( img , pt1 , pt2 , color , thickness ) # pt1\u4e3a\u5de6\u4e0a\u89d2,pt2\u4e3a\u53f3\u4e0b\u89d2 # \u7ed8\u5236\u5706\u5f62 cv2 . circle ( img , pt , radius , color , thickness ) # pt\u4e3a\u5706\u70b9 cv2 . circle ( img , pt , 2 , color , 1 ) # \u6dfb\u52a0\u6587\u5b57 cv2 . putText ( img , str , pt , cv2 . font , fontScale , color , thickness ) # pt\u4e3a\u5de6\u4e0a\u89d2\u5750\u6807 cv2 . putText ( img , str , pt , cv2 . FONT_HERSHEY_SIMPLEX , 2 , color , 1 ) # \u7ed8\u5236\u591a\u8fb9\u5f62 cv2 . polylines ( img ,[ pts ], isClosed , color , thickness ) # [pts]\u4e3a\u70b9\u96c6 cv2 . polylines ( img ,[ pts ], True , color , 1 ) # # \u586b\u5145\u591a\u8fb9\u5f62 cv2 . fillPoly ( img ,[ pts ], color ) # [pts]\u4e3a\u70b9\u96c6","title":"OpenCV CheatSheet"},{"location":"2019_summer/opencv/cheatsheet/#opencv-cheatsheet","text":"","title":"OpenCV CheatSheet"},{"location":"2019_summer/opencv/cheatsheet/#_1","text":"","title":"\u57fa\u672c\u8f93\u5165\u8f93\u51fa"},{"location":"2019_summer/opencv/cheatsheet/#_2","text":"# \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( filename ) image = cv2 . imread ( filename , cv2 . CV_LOAD_IMAGE_GRAYSCALE ) # \u56fe\u50cf\u4fdd\u5b58 cv2 . imwrite ( filename , image )","title":"\u56fe\u50cf\u8bfb\\\u5199"},{"location":"2019_summer/opencv/cheatsheet/#_3","text":"# \u89c6\u9891\u8bfb\u5165 cameraCapture = cv2 . VideoCapture ( 0 ) # \u521b\u5efa\u89c6\u9891\u6d41\u5bf9\u8c61 cameraCapture = cv2 . VideoCapture ( filename ) cameraCapture = cv2 . VideoCapture ( url ) success , frame = cameraCapture . read () # \u9010\u5e27\u8bfb\u5165\u89c6\u9891\u5e27 # \u89c6\u9891\u4fdd\u5b58 fourcc = cv2 . VideoWriter_fourcc ( c1 , c2 , c3 , c4 ) # videoWriter = cv2 . VideoWriter ( filename , fourcc , fps , frameSize ) # \u89c6\u9891\u4fdd\u5b58\u914d\u7f6e","title":"\u89c6\u9891\u8bfb\\\u5199"},{"location":"2019_summer/opencv/cheatsheet/#_4","text":"# \u521b\u5efa\u663e\u793a\u7a97\u53e3 cv2 . namedWindow ( winname ) cv2 . namedWindow ( winname , flags ) # \u663e\u793a\u56fe\u50cf cv . imshow ( winname , mat ) # \u56fe\u50cf\u663e\u793a\u65f6\u957f cv2 . waitKey () # \u8868\u793a\u7b49\u5f85\u7528\u6237\u64cd\u4f5c. cv2 . waitKey ( delay ) # delay\u4e3a\u505c\u987f\u6beb\u79d2\u6570. 0\u8868\u793a\u7b49\u5f85\u7528\u6237\u64cd\u4f5c.","title":"\u56fe\u50cf\u663e\u793a"},{"location":"2019_summer/opencv/cheatsheet/#_5","text":"","title":"\u57fa\u7840\u56fe\u50cf\u5904\u7406"},{"location":"2019_summer/opencv/cheatsheet/#_6","text":"img = numpy . zeros (( height , width , channels ), numpy . uint8 ) img = numpy . zeros_like ( src_img )","title":"\u521b\u5efa\u56fe\u50cf\u77e9\u9635"},{"location":"2019_summer/opencv/cheatsheet/#_7","text":"img [ x , y , z ] = [ v1 , v2 , v3 ] img_cp = img . copy () # \u56fe\u50cf\u590d\u5236","title":"\u56fe\u50cf\u77e9\u9635\u6570\u503c\u64cd\u4f5c"},{"location":"2019_summer/opencv/cheatsheet/#_8","text":"dst_img = cv2 . cvtColor ( src_img , flags ) dst_img = cv2 . cvtColor ( src_img , cv2 . COLOR_BGR2GRAY ) # BGR\u8f6c\u4e3a\u7070\u5ea6","title":"\u56fe\u50cf\u8272\u5f69\u7a7a\u95f4\u53d8\u6362"},{"location":"2019_summer/opencv/cheatsheet/#_9","text":"# \u56fe\u50cf\u7f29\u653e dst_img = cv2 . resize ( src_img ,( height , width )) # \u5782\u76f4\u7ffb\u8f6c dst_img = cv2 . flip ( src_img , 0 ) # \u6c34\u5e73\u7ffb\u8f6c dst_img = cv2 . filp ( src_img , - 1 ) # \u4eff\u5c04\u53d8\u6362(\u5e73\u79fb,\u7f29\u653e,\u65cb\u8f6c) M = np . float32 ([[ M11 , M12 , M13 ],[ M21 , M22 , M23 ],[ 0 , 0 , 1 ]]) dst_img = cv2 . warpAffine ( src_img , M ,( height , width ))","title":"\u51e0\u4f55\u53d8\u6362"},{"location":"2019_summer/opencv/cheatsheet/#_10","text":"# \u56fe\u50cf\u5206\u5272 ret , dst_img = cv2 . threshold ( src_img , th , val , flags ) ret , dst_img = cv2 . threshold ( src_img , th , val , cv2 . THRESH_BINARY ) # \u8fb9\u7f18\u68c0\u6d4b dst_img = cv2 . Canny ( src_img , th1 , th2 ) dst_img = cv2 . Canny ( src_img , th1 , th2 , apertureSize , L2gradient ) # Hough\u53d8\u6362 lines = cv2 . HoughLines ( src_img , 1 , np . pi / 180 , 100 ) lines = cv2 . HoughLines ( src_img , rho , theta , th , min_theta , max_theta ) lines = cv2 . HoughLinesP ( src_img , 1 , np . pi / 180 , 100 , 100 , 20 ) lines = cv2 . HoughLinesP ( src_img , rho , theta , th , minLineLength , maxLineGap )","title":"\u56fe\u50cf\u5206\u6790"},{"location":"2019_summer/opencv/cheatsheet/#_11","text":"# \u7ed8\u5236\u76f4\u7ebf cv2 . line ( img , pt1 , pt2 , color , thickness ) # pt1\u4e3a\u8d77\u70b9,pt2\u4e3a\u7ec8\u70b9 # \u7ed8\u5236\u77e9\u5f62 cv2 . rectangle ( img , pt1 , pt2 , color , thickness ) # pt1\u4e3a\u5de6\u4e0a\u89d2,pt2\u4e3a\u53f3\u4e0b\u89d2 # \u7ed8\u5236\u5706\u5f62 cv2 . circle ( img , pt , radius , color , thickness ) # pt\u4e3a\u5706\u70b9 cv2 . circle ( img , pt , 2 , color , 1 ) # \u6dfb\u52a0\u6587\u5b57 cv2 . putText ( img , str , pt , cv2 . font , fontScale , color , thickness ) # pt\u4e3a\u5de6\u4e0a\u89d2\u5750\u6807 cv2 . putText ( img , str , pt , cv2 . FONT_HERSHEY_SIMPLEX , 2 , color , 1 ) # \u7ed8\u5236\u591a\u8fb9\u5f62 cv2 . polylines ( img ,[ pts ], isClosed , color , thickness ) # [pts]\u4e3a\u70b9\u96c6 cv2 . polylines ( img ,[ pts ], True , color , 1 ) # # \u586b\u5145\u591a\u8fb9\u5f62 cv2 . fillPoly ( img ,[ pts ], color ) # [pts]\u4e3a\u70b9\u96c6","title":"\u56fe\u50cf\u7ed8\u5236"},{"location":"2019_summer/opencv/opencv/","text":"OpenCV \u57f9\u8bad \u00b6 \u7248\u672c\u4fe1\u606f Version 1.0.2 lastUpdateTime\uff1a2019-07-10 09:49 \u589e\u52a0\u7248\u672c\u4fe1\u606f; \u589e\u52a0\u4e2d\u6587\u641c\u7d22\u529f\u80fd; \u66f4\u65b0\u7b80\u4ecb; \u66f4\u65b0example 2 \u6ce8\u91ca; \u4fee\u6539example 3 \u5173\u952e\u8bcd\u9519\u8bef; \u6b64\u8d44\u6599\u4e3b\u8981\u7528\u4e8e\u57f9\u8bad\u671f\u95f4\u5e38\u7528 OpenCV \u51fd\u6570\u7684\u5feb\u901f\u4e0a\u624b\u3002\u56e0\u65f6\u95f4\u7cbe\u529b\u6709\u9650\uff0c\u8be6\u7ec6\u8d44\u6599\u8bf7\u67e5\u770b\uff1a OpenCV Documentation (Online,\u6839\u636e\u4e2a\u4eba\u5b89\u88c5\u7684\u7248\u672c\u67e5\u627e\u5bf9\u5e94\u7684\u6587\u6863) OpenCV-Python Tutorials (Online,OpenCV-python\u5b98\u65b9\u6559\u7a0b) OpenCV_Computer_Vision_with_Python (PDF\u7535\u5b50\u4e66,\u7248\u672c\u8f83\u8001,\u5bf9\u4e8e\u65b0\u7248\u672c\u53c2\u8003\u4f5c\u7528\u6709\u9650) Python Code Examples (Python \u4ee3\u7801\u793a\u4f8b\u641c\u7d22. \u8f93\u5165\u2018cv2\u2019,\u53ef\u68c0\u7d22opencv\u5e38\u89c1module\u7684\u7528\u4f8b) \u7b80\u4ecb \u00b6 OpenCV\u662f\u4e00\u4e2a\u5f00\u6e90(BSD license)\u8de8\u5e73\u53f0(Linux,Windows, OS_X,Android,IOS)\u8ba1\u7b97\u673a\u89c6\u89c9\u5e93; \u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00(C++,Java,Python,C#,Go); \u652f\u6301\u5404\u79cd\u5e38\u89c1\u56fe\u50cf\u5904\u7406,\u8ba1\u7b97\u673a\u89c6\u89c9,\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4ee5\u53ca\u5e94\u7528; \u5e95\u5c42\u7531C,C++\u5b9e\u73b0,\u8f7b\u91cf\u4e14\u9ad8\u6548; OpenCV-Python\u662fOpenCV\u7684python api; \u5b89\u88c5 \u00b6 \u65b9\u5f0f\u4e00\uff1a\u5728python\u5b89\u88c5\u76ee\u5f55\u7684Scripts\u6587\u4ef6\u5939\u4e0b,\u7528pip\u6216\u8005conda\u5de5\u5177\u5b89\u88c5\u3002 '''\u4ee5\u4e0b\u8bed\u53e5,\u6839\u636e\u9700\u8981\u9009\u62e9\u4e00\u53e5\u6267\u884c\u5373\u53ef''' # \u4f7f\u7528pip\u5de5\u5177 pip install opencv - python # \u4f7f\u7528conda\u5de5\u5177 conda install - c menpo opencv = 3.4 . 0 conda install - c conda - forge opencv = 3.4 . 0 # \u4f7f\u7528pip\u5b89\u88c5\u6307\u5b9a\u7248\u672copencv pip install opencv - python == 3.4 . 0 \u6ce8\u610f opencv3.0\u7248\u672c\u540e\u7684api\u63a5\u53e3\u5206\u6210\u4e86main module\u548cextra module\u4e24\u90e8\u5206, pip install opencv-python \u901a\u5e38\u4ec5\u5b89\u88c5\u4e86main module. \u90e8\u5206\u529f\u80fd\u5982background extraction,optical flow,object tracking\u7b49\u56e0\u4e0d\u5728main module\u4e2d\u65e0\u6cd5\u4f7f\u7528,\u9700\u8981\u901a\u8fc7 pip install opencv-contrib-python \u5b89\u88c5\u5305\u542bmain module\u548cextra module(\u5177\u4f53\u90a3\u4e9b\u529f\u80fd\u5c5e\u4e8emain module\u4e0eextra module,\u9700\u8981\u67e5\u770b\u5177\u4f53\u7248\u672c\u7684OpenCV document) \u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7wheel\u6587\u4ef6\u5b89\u88c5\u3002 \u4e0b\u8f7d\u5bf9\u5e94\u5e73\u53f0\u4e0epython\u7248\u672c\u7684wheel\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a https://pypi.org/project/opencv-contrib-python/#files \uff1b \u8fdb\u5165wheel\u6587\u4ef6\u4e0b\u8f7d\u76ee\u5f55,\u5b89\u88c5wheel\u6587\u4ef6 # \u8fdb\u5165wheel\u4e0b\u8f7d\u76ee\u5f55(\u5047\u8bbeC:\\python35\u4e3a\u6587\u4ef6\u4e0b\u8f7d\u76ee\u5f55) cd C : \\ python35 # \u6587\u4ef6\u5b89\u88c5 pip install opencv_contrib_python - 4.1 . 0.25 - cp35 - cp35m - win_amd64 . whl \u6d4b\u8bd5 import cv2 cv2 . __version__ \u7ed3\u679c\u82e5\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5219\u8868\u660e\u5b89\u88c5\u6210\u529f\u3002 \u6ce8\u610f \u8be6\u7ec6\u5b89\u88c5\u4e0e\u4f7f\u7528\u65b9\u6cd5\u4ee5\u53ca\u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6cd5\u53ef\u53c2\u8003\uff1a https://pypi.org/project/opencv-contrib-python/ \u793a\u4f8b \u00b6 \u672c\u6b21\u57f9\u8bad\u5305\u62ec\u4ee5\u4e0b\u793a\u4f8b\u5185\u5bb9\uff1a Example 1: \u56fe\u50cf\u8bfb\u5199; Example 2: \u89c6\u9891\u8bfb\u5199; Example 3: \u56fe\u50cf\u53d8\u6362; Example 4: \u56fe\u50cf\u5206\u6790; Example 5: \u56fe\u50cf\u7ed8\u5236; Example 6: GUI; \u6240\u6709\u4ee3\u7801\u793a\u4f8b\u6587\u4ef6\u6253\u5305\u4e0b\u8f7d Example 1 \u00b6 ''' Example 1\uff1a\u56fe\u50cf\u8bfb\u5165,\u663e\u793a,\u4fdd\u5b58; ''' import os import cv2 os . chdir ( os . path . dirname ( __file__ )) # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( \"MyPic.png\" ) # \u76f4\u63a5\u4ee5\u7070\u5ea6\u56fe\u5f62\u5f0f\u8f7d\u5165\u56fe\u50cf image_gray = cv2 . imread ( \"MyPic.png\" , cv2 . IMREAD_GRAYSCALE ) # \u4e0d\u53d8 image_unchange = cv2 . imread ( \"MyPic.png\" , cv2 . IMREAD_UNCHANGED ) # \u5efa\u7acb\u56fe\u50cf\u663e\u793a\u7a97\u53e3 cv2 . namedWindow ( \"display\" , cv2 . WINDOW_NORMAL ) # \u663e\u793a\u56fe\u50cf cv2 . imshow ( \"display\" , image ) # \u7b49\u5f85\u64cd\u4f5c cv2 . waitKey () # \u56fe\u50cf\u4fdd\u5b58 cv2 . imwrite ( \"MyPic.jpg\" , image ) 1- \u56fe\u50cf\u8bfb\u5165 retval = cv2 . imread ( filename , flags ) flags\u5e38\u89c1\u8bbe\u7f6e\uff1a \u5e8f\u53f7 \u5173\u952e\u5b57 \u8272\u5f69\u7a7a\u95f4 1 IMAGE_COLOR BGR 2 IMAGE_GRAYSCALE \u7070\u5ea6 3 IMAGE_UNCHANGED \u4e0e\u539f\u56fe\u76f8\u540c \u6ce8\u610f \u6587\u4ef6\u4e2d\u4e0d\u8981\u5305\u542b\u4e2d\u6587\u5b57\u7b26; OpenCV\u4ee5B,G,R\u7684\u987a\u5e8f\u8bfb\u5165\u989c\u8272\u901a\u9053, \u4e0e\u6709\u4e9b\u5e93\u4ee5RGB\u8bfb\u5165\u7684\u987a\u5e8f\u4e0d\u540c(\u5982Matplotlib). \u4e0d\u540c\u5e93\u5904\u7406\u56fe\u50cf\u65f6,\u9700\u8981\u6ce8\u610f\u5e93\u5bf9\u56fe\u50cf\u901a\u9053\u5b9a\u4e49,\u82e5\u9700\u8981RGB\u989c\u8272\u987a\u5e8f,\u5219\u9700\u8981\u5bf9\u989c\u8272\u7a7a\u95f4\u8fdb\u884c\u53d8\u6362.\u53d8\u6362\u65b9\u6cd5\u89c1 Example 3. 2- \u56fe\u50cf\u663e\u793a cv2 . namedWindow ( winname , flags ) # \u9ed8\u8ba4flags=CV_WINDOW_AUTOSIZE| CV_WINDOW_KEEPRATIO cv2 . imshow ( winname , mat ) # \u53ef\u901a\u8fc7Ctrl+C\u590d\u5236\u56fe\u50cf\u81f3\u526a\u8d34\u677f,\u901a\u8fc7Ctrl+S\u5f39\u51fa\u4fdd\u5b58\u5bf9\u8bdd\u6846 cv2 . waitKey ( delay ) # delay\u4e3a\u505c\u987f\u6beb\u79d2\u6570. 0\u8868\u793a\u7b49\u5f85\u7528\u6237\u64cd\u4f5c. namedWindow flags \u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 WINDOW_NORMAL \u7a97\u53e3\u53ef\u8c03 2 WINDOW_AUTOSIZE \u7a97\u53e3\u81ea\u9002\u5e94 3 WINDOW_FREERATIO \u4e0d\u4fdd\u6301\u6a2a\u7eb5\u6bd4 4 WINDOW_KEEPRATIO \u4fdd\u6301\u6a2a\u7eb5\u6bd4 3- \u56fe\u50cf\u4fdd\u5b58 retval = cv2.imwrite(filename,image,flags) \u63d0\u793a \u4e5f\u53ef\u4ee5\u5728\u663e\u793a\u56fe\u50cf\u7684\u7a97\u53e3\u4e2d,\u901a\u8fc7\u952e\u76d8\u6309\u4e0b Ctrl + S ,\u5728\u5f39\u51fa\u7684\u6587\u4ef6\u4fdd\u5b58\u5bf9\u8bdd\u6846\u4e2d\u8f93\u5165\u4fdd\u5b58\u6587\u4ef6\u7684\u8def\u5f84\u4e0e\u540d\u79f0\u4fdd\u5b58. Example 2 \u00b6 ''' Example 2: \u89c6\u9891\u8bfb\u5165\u4e0e\u4fdd\u5b58 ''' import os import cv2 os . chdir ( os . path . dirname ( __file__ )) # \u89c6\u9891\u8bfb\u5165 # \u8bfb\u5165\u672c\u5730\u89c6\u9891\u6587\u4ef6 cameraCapture = cv2 . VideoCapture ( \"MyVideo.mp4\" ) # \u8bfb\u5165\u672c\u5730\u6444\u50cf\u673a\u89c6\u9891\u6d41 cameraCapture = cv2 . VideoCapture ( 0 ) # \u8bfb\u5165\u7f51\u7edc\u89c6\u9891\u6d41(RTSP\u534f\u8bae)\u3010\u5927\u96c4\u5154\u52a8\u753b\u7247-\u70b9\u64ad\u3011 cameraCapture = cv2 . VideoCapture ( \"rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov\" ) # \u8bfb\u5165\u7f51\u7edc\u89c6\u9891\u6d41(RTMP\u534f\u8bae)\u3010\u9999\u6e2f\u536b\u89c6-\u76f4\u64ad\u3011 cameraCapture = cv2 . VideoCapture ( \"rtmp://live.hkstv.hk.lxdns.com/live/hks1\" ) # \u8bfb\u5165\u7f51\u7edc\u89c6\u9891\u6d41(HTTP\u534f\u8bae)\u3010CCTV1-\u76f4\u64ad\u3011 cameraCapture = cv2 . VideoCapture ( \"http://223.110.242.130:6610/gitv/live1/G_CCTV-1-HQ/1.m3u8\" ) cv2 . namedWindow ( \"display\" , cv2 . WINDOW_NORMAL ) #\u89c6\u9891\u4fdd\u5b58 fourcc = cv2 . VideoWriter_fourcc ( 'X' , 'V' , 'I' , 'D' ) # \u89c6\u9891\u7f16\u7801\u914d\u7f6e videoWriter = cv2 . VideoWriter ( 'output.mp4' , fourcc , 25 , ( 480 , 320 )) # \u89c6\u9891\u4fdd\u5b58\u914d\u7f6e # \u8fde\u7eed\u64ad\u653e\u89c6\u9891\u5e27\u56fe\u50cf while True : # \u4ece\u89c6\u9891\u6d41\u4e2d\u8bfb\u53d6\u4e00\u5e27\u56fe\u50cf success , frame = cameraCapture . read () if success : # \u663e\u793a\u56fe\u50cf cv2 . imshow ( \"display\" , frame ) # \u5c06\u5e27\u56fe\u50cf\u6dfb\u52a0\u5230\u89c6\u9891\u4fdd\u5b58\u5e8f\u5217\u4e2d img = cv2 . resize ( frame ,( 480 , 320 )) # \u975e\u5fc5\u987b videoWriter . write ( img ) # \u4ea4\u4e92 if cv2 . waitKey ( 1 ) == 27 : # \u6309'ESC'\u952e\u540e\u9000\u51fa\u7a0b\u5e8f break # \u89c6\u9891\u7ed3\u675f/\u8bfb\u53d6\u9519\u8bef\u540e\u9000\u51fa else : break # \u91ca\u653ewriter videoWriter . release () 1- \u89c6\u9891\u8bfb\u5165 OpenCV\u53ef\u8bfb\u5165\u672c\u5730\u56fe\u7247\u5e8f\u5217\u3001\u89c6\u9891\u6587\u4ef6\u3001\u6444\u50cf\u5934\u89c6\u9891\u6d41\u4ee5\u53ca\u7f51\u7edc\u89c6\u9891\u6d41\u6570\u636e(\u5982RTSP\u3001RTMP\u3001HTTP\u3001UDP) # \u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 < VideoCapture object > = cv2 . VideoCapture () < VideoCapture object > = cv2 . VideoCapture ( filename ) < VideoCapture object > = cv2 . VideoCapture ( url ) # \u8bfb\u5165\u65b9\u6cd5 success , frame = videoCaptureobject . read () # \u8bfb\u5165\u4e00\u5e27\u56fe\u50cf success: \u89c6\u9891\u5e27\u8bfb\u5165\u72b6\u6001, frame: \u89c6\u9891\u5e27\u56fe\u50cf 2- \u89c6\u9891\u4fdd\u5b58 # \u7f16\u7801\u8bbe\u7f6e fourcc = cv2 . VideoWriter_fourcc ( c1 , c2 , c3 , c4 ) # \u4fdd\u5b58\u8bbe\u7f6e < VideoWriter object > = cv2 . VideoWriter ( filename , fourcc , fps , frameSize ) c1,c2,c3,c4\u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u7f16\u7801 1 cv2.VideoWriter_fourcc('I','4','2','0') YUV\u7f16\u7801 2 cv2.VideoWriter_fourcc('P','I','M','1') MPEG-1\u7f16\u7801 3 cv2.VideoWriter_fourcc('X','V','I','D') MPEG-4\u7f16\u7801 4 cv2.VideoWriter_fourcc('F','L','V','1') Flash\u7f16\u7801 Example 3 \u00b6 ''' Example 3: \u56fe\u50cf\u53d8\u6362 ''' import os import cv2 import numpy as np os . chdir ( os . path . dirname ( __file__ )) # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( \"MyPic.png\" ) # cv2.IMREAD_COLOR # \u8272\u5f69\u7a7a\u95f4\u53d8\u6362 image_gray = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \u5c3a\u5ea6\u53d8\u6362 image_scale = cv2 . resize ( image ,( 320 , 480 )) # \u4f4d\u79fb M1 = np . float32 ([[ 1 , 0 , 100 ],[ 0 , 1 , 50 ]]) image_mov = cv2 . warpAffine ( image , M1 ,( image . shape [ 1 ], image . shape [ 0 ])) # \u56fe\u50cf\u65cb\u8f6c print ( image . shape ) M2 = cv2 . getRotationMatrix2D (( 960 , 540 ), 10 , 1 ) image_rot = cv2 . warpAffine ( image , M2 ,( image . shape [ 1 ], image . shape [ 0 ])) # \u56fe\u50cf\u663e\u793a cv2 . namedWindow ( \"image\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_gray\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_scale\" ) cv2 . namedWindow ( \"image_mov\" , cv2 . WINDOW_NORMAL ) cv2 . namedWindow ( \"image_rot\" , cv2 . WINDOW_NORMAL ) cv2 . imshow ( \"image\" , image ) cv2 . imshow ( \"image_gray\" , image_gray ) cv2 . imshow ( \"image_scale\" , image_scale ) cv2 . imshow ( \"image_mov\" , image_mov ) cv2 . imshow ( \"image_rot\" , image_rot ) cv2 . waitKey () Example 3 \u56fe\u50cf\u53d8\u6362\u6548\u679c\u5c55\u793a 1- \u8272\u5f69\u7a7a\u95f4\u53d8\u6362 dst = cv2 . cvtColor ( src , flags ) cvtColor flags \u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 COLOR_BGR2RGB BGR\u987a\u5e8f\u8f6cRGB 2 COLOR_BGR2GRAY \u8f6c\u4e3a\u7070\u5ea6\u56fe 2- \u56fe\u50cf\u7f29\u653e dst = cv2 . resize ( src , dsize , dst , fx , fy , interpolation ) #\u9ed8\u8ba4\u503c:fx=0,fy=0,interpolation=cv2.INTER_LINEAR dsize : \u8f93\u51fa\u56fe\u50cf\u7684\u5c3a\u5bf8(w,h) fx : \u6a2a\u8f74\u5c3a\u5ea6\u56e0\u5b50,\u5982\u679c fx=0 ,\u5219 double(dsize.width/src.cols) double(dsize.width/src.cols) fy : \u7eb5\u8f74\u5c3a\u5ea6\u56e0\u5b50,\u5982\u679c fy=0 ,\u5219 double(dsize.height/src.rows) double(dsize.height/src.rows) resize interpolation \u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 INTER_NEAREST \u90bb\u8fd1\u63d2\u503c 2 INTER_LINEAR \u53cc\u7ebf\u6027\u63d2\u503c(\u6548\u679c\u4e00\u822c,\u5feb) 3 INTER_CUBIC \u53cc\u4e09\u6b21\u63d2\u503c(\u6548\u679c\u597d,\u6162) 3- \u4eff\u5c04\u53d8\u6362 \u4eff\u5c04\u53d8\u6362\u5373\u4fdd\u8bc1\u7ebf\u5171\u70b9\u3001\u70b9\u5171\u7ebf\u4ee5\u53ca\u7ebf\u95f4\u5e73\u884c\u5173\u7cfb\u4e0d\u53d8\u7684\u51e0\u4f55\u53d8\u6362\u3002\u5305\u62ec\u5e73\u79fb\u3001\u7f29\u653e\u3001\u526a\u5207\u3001\u65cb\u8f6c\u7b49\u6548\u679c\u3002 dst = cv2.warpAffine(src, M, dsize) [x',y',1] = [x,y,1]\\times\\left[\\begin{matrix}M_{11}&M_{12}&M_{13}\\\\M_{21}&M_{22}&M_{23}\\\\0&0&1\\end{matrix}\\right] [x',y',1] = [x,y,1]\\times\\left[\\begin{matrix}M_{11}&M_{12}&M_{13}\\\\M_{21}&M_{22}&M_{23}\\\\0&0&1\\end{matrix}\\right] \\left\\{ \\begin{aligned} x'=M_{11}x+M_{12}y+M_{13} \\\\ y'=M_{21}x+M_{22}y+M_{23} \\end{aligned} \\right. \\left\\{ \\begin{aligned} x'=M_{11}x+M_{12}y+M_{13} \\\\ y'=M_{21}x+M_{22}y+M_{23} \\end{aligned} \\right. \u53d8\u6362\u77e9\u9635\u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u53d8\u6362\u77e9\u9635 \u5c5e\u6027 1 \\left[\\begin{matrix}1&0&0\\\\0&1&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}1&0&0\\\\0&1&0\\\\0&0&1 \\end{matrix}\\right] \u4e0d\u53d8 2 \\left[\\begin{matrix}1&0&X\\\\0&1&Y\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}1&0&X\\\\0&1&Y\\\\0&0&1 \\end{matrix}\\right] x \u65b9\u5411\u5e73\u79fbX, y \u65b9\u5411\u5e73\u79fbY 3 \\left[\\begin{matrix}W&0&0\\\\0&H&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}W&0&0\\\\0&H&0\\\\0&0&1 \\end{matrix}\\right] x \u65b9\u5411\u653e\u5927W\u500d, y \u65b9\u5411\u653e\u5927H\u500d 4 \\left[\\begin{matrix}cos\\theta&sin\\theta&0\\\\-sin\\theta&cos\\theta&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}cos\\theta&sin\\theta&0\\\\-sin\\theta&cos\\theta&0\\\\0&0&1 \\end{matrix}\\right] \u4ee5(0,0)\u4e3a\u57fa\u70b9,\u987a\u65f6\u9488\u65cb\u8f6c \\theta \\theta 5 \\left[\\begin{matrix}1&0&0\\\\0&-1&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}1&0&0\\\\0&-1&0\\\\0&0&1 \\end{matrix}\\right] \u5782\u76f4\u7ffb\u8f6c 6 \\left[\\begin{matrix}-1&0&0\\\\0&1&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}-1&0&0\\\\0&1&0\\\\0&0&1 \\end{matrix}\\right] \u6c34\u5e73\u7ffb\u8f6c Example 4 \u00b6 ''' Example 4: \u56fe\u50cf\u5206\u6790 ''' import os import cv2 import numpy as np os . chdir ( os . path . dirname ( __file__ )) # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( \"MyPic.png\" ) # cv2.IMREAD_COLOR image_gray = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \u56fe\u50cf\u5206\u5272 ret , image_bw = cv2 . threshold ( image_gray , 127 , 255 , cv2 . THRESH_BINARY ) # \u8fb9\u7f18\u68c0\u6d4b image_canny = cv2 . Canny ( image_gray , 100 , 300 ) # Hough\u53d8\u6362 minLineLength = 100 maxLineGap = 20 lines = cv2 . HoughLinesP ( image_canny , 1 , np . pi / 180 , 100 , minLineLength , maxLineGap ) image_hough = image . copy () for elem in lines : x1 , y1 , x2 , y2 = elem [ 0 ] cv2 . line ( image_hough , ( x1 , y1 ), ( x2 , y2 ), ( 0 , 255 , 0 ), 5 ) # \u89d2\u70b9 # \u56fe\u50cf\u663e\u793a cv2 . namedWindow ( \"image\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_bw\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_canny\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_hough\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . imshow ( \"image\" , image ) cv2 . imshow ( \"image_bw\" , image_bw ) cv2 . imshow ( \"image_canny\" , image_canny ) cv2 . imshow ( \"image_hough\" , image_hough ) cv2 . waitKey () Example 4 \u56fe\u50cf\u5206\u6790\u6548\u679c\u5c55\u793a 1- \u56fe\u50cf\u5206\u5272 \u56fe\u50cf\u5206\u5272\u5c31\u662f\u63d0\u53d6\u56fe\u50cf\u611f\u5174\u8da3\u76ee\u6807/\u533a\u57df\u7684\u8fc7\u7a0b. # \u56fa\u5b9a\u9608\u503c\u4e8c\u503c\u5316 ret, dst = cv2.threshold(src, thresh, maxval,flags) #thresh\u4e3a\u9608\u503c,maxval\u5f53\u50cf\u7d20\u503c\u8d85\u8fc7\u4e86\u9608\u503c\u65f6\u7684\u8bbe\u5b9a\u503c,flags\u4e3a\u64cd\u4f5c\u7c7b\u578b threshold flags \u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 THRESH_BINARY src(x,y)>thresh,dst(x,y)=max_value,\u53cd\u4e4bdst(x,y)=0 2 THRESH_BINARY_INV src(x,y)>thresh,dst(x,y)=0,\u53cd\u4e4bdst(x,y)=max_value 3 THRESH_TRUNC src(x,y)>thresh,dst(x,y)=max_value,\u53cd\u4e4bdst(x,y)=src(x,y) 4 THRESH_TOZERO src(x,y)>thresh,dst(x,y)=src(x,y),\u53cd\u4e4bdst(x,y)=0 5 THRESH_TOZERO_INV src(x,y)>thesh,dst(x,y)=0,\u53cd\u4e4bdst(x,y)=src(x,y) 2- \u8fb9\u7f18\u68c0\u6d4b \u8fb9\u7f18\u68c0\u6d4b\u7684\u76ee\u7684\u662f\u8bc6\u522b\u56fe\u50cf\u4e2d\u4eae\u5ea6\u53d8\u5316\u8f83\u4e3a\u660e\u663e\u7684\u70b9\u3002 \u5e38\u89c1\u7684\u65b9\u6cd5\u6709\u4e09\u79cd\uff0c Sobel \u7b97\u5b50(\u4e00\u9636\u5fae\u5206\u7b97\u5b50)\uff0c Laplacian \u7b97\u5b50(\u4e8c\u9636\u5fae\u5206\u7b97\u5b50)\uff0c Canny \u7b97\u5b50\u3002 Canny\u7b97\u5b50\u7684\u8ba1\u7b97\u6b65\u9aa4\uff1a \u9ad8\u65af\u6ee4\u6ce2\u5e73\u6ed1\uff1b H_{ij}=\\frac{1}{2\\pi\\sigma^2}exp(-\\frac{(i-(k+1))^2+(j-(k+1))^2}{2\\sigma^2});1\\leq i,j\\leq (2k+1) H_{ij}=\\frac{1}{2\\pi\\sigma^2}exp(-\\frac{(i-(k+1))^2+(j-(k+1))^2}{2\\sigma^2});1\\leq i,j\\leq (2k+1) e = H*A e = H*A \u8ba1\u7b97\u5df2\u9636\u504f\u5bfc\u7684\u5e45\u503c\u548c\u65b9\u5411\uff1b G = \\sqrt{G_x^2+G_y^2} , \\theta=arctan(\\frac{G_y}{G_x}) G = \\sqrt{G_x^2+G_y^2} , \\theta=arctan(\\frac{G_y}{G_x}) x,y \u65b9\u5411\u7684Sobel\u7b97\u5b50 S_x= \\left[ \\begin{matrix}1&2&1\\\\0&0&0\\\\-1&-2&-1\\end{matrix} \\right], S_y= \\left[ \\begin{matrix}-1&0&1\\\\-2&0&2\\\\-1&0&1\\end{matrix} \\right] S_x= \\left[ \\begin{matrix}1&2&1\\\\0&0&0\\\\-1&-2&-1\\end{matrix} \\right], S_y= \\left[ \\begin{matrix}-1&0&1\\\\-2&0&2\\\\-1&0&1\\end{matrix} \\right] G_x=S_x*A, G_y=S_y*A G_x=S_x*A, G_y=S_y*A \u5bf9\u68af\u5ea6\u5e45\u503c\u8fdb\u884c\u975e\u6700\u5927\u503c\u6291\u5236\uff1b \u7528\u53cc\u9608\u503c\u7b97\u6cd5\u68c0\u6d4b\u548c\u8fde\u63a5\u8fb9\u7f18. edges = cv2 . Canny ( image , threshold1 , threshold2 , apertureSize = 3 , L2gradient = false ) threshold1\uff1a\u53cc\u9608\u503c\u7b97\u6cd5\u4e2d\u7684\u9608\u503c1\uff0c\u4f4e\u4e8e\u9608\u503c1\u7684\u786e\u5b9a\u4e0d\u662f\u8fb9\u7f18\uff1bthreshold2\uff1a\u53cc\u9608\u503c\u7b97\u6cd5\u4e2d\u7684\u9608\u503c2\uff0c\u9ad8\u4e8e\u9608\u503c2\u7684\u786e\u5b9a\u662f\u8fb9\u7f18\u3002\u5728\u9608\u503c1\u4e0e\u9608\u503c2\u4e4b\u95f4\u7684\u50cf\u7d20\u70b9\uff0c\u82e5\u4e0e\u786e\u5b9a\u8fb9\u7f18\u76f8\u63a5\uff0c\u5219\u8ba4\u4e3a\u662f\u8fb9\u7f18\u5426\u5219\u4e0d\u662f\u3002 apertureSize\uff1aSobel\u7b97\u5b50\u7684\u5927\u5c0f; L2gradient\uff1aL2\u8303\u6570\u8ba1\u7b97\u68af\u5ea6\u6807\u8bc6\uff0c\u82e5\u4e3aTrue\uff0c\u5219\u4f7f\u7528L2\u8303\u6570\u8ba1\u7b97\u68af\u5ea6\uff0c\u7ed3\u679c\u7cbe\u5ea6\u66f4\u9ad8\uff1b\u5426\u5219\u4f7f\u7528L1\u8303\u6570\u8ba1\u7b97\u68af\u5ea6\u3002 L_2 norm = \\sqrt{(\\frac{dI}{dx})^2+(\\frac{dI}{dy})^2} L_2 norm = \\sqrt{(\\frac{dI}{dx})^2+(\\frac{dI}{dy})^2} \uff1b L_1 norm = |\\frac{dI}{dx}|+|\\frac{dI}{dy}| L_1 norm = |\\frac{dI}{dx}|+|\\frac{dI}{dy}| \u6ce8\u610f \u8fb9\u7f18\u68c0\u6d4b\u57fa\u4e8e\u7070\u5ea6\u56fe\u8fdb\u884c\u8ba1\u7b97\uff0c\u8ba1\u7b97\u4e4b\u524d\u5148\u5c06\u8272\u5f69\u7a7a\u95f4\u8f6c\u4e3a\u7070\u5ea6\u6216\u4ee5\u5355\u8272\u5f69\u901a\u9053\u8ba1\u7b97. 3- Hough\u53d8\u6362 Hough\u53d8\u6362\u662f\u68c0\u6d4b\u5177\u6709\u7279\u5b9a\u53c2\u6570\u5f62\u72b6\u7684\u65b9\u6cd5\u3002\u5176\u539f\u7406\u4e3a\u5c06\u5f62\u72b6\u53c2\u6570\u5728hough\u7a7a\u95f4\u4e2d\u8fdb\u884c\u6295\u7968\uff0c\u6295\u7968\u7ed3\u679c\u4e2d\u7684\u5c40\u90e8\u6700\u5927\u503c\u5373\u4e3a\u6240\u8981\u63d0\u53d6\u5f62\u72b6\u7684\u53c2\u6570\u3002 Hough\u53d8\u6362\u6700\u7b80\u5355\u7684\u5e94\u7528\u5c31\u662f\u68c0\u6d4b\u76f4\u7ebf\u3002 \u659c\u622a\u5f0f\uff1a y = mx + b y = mx + b \uff0c \u5219\u53c2\u6570\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9(m,b)\u5c31\u53ef\u4ee5\u8868\u793a\u4e00\u6761\u76f4\u7ebf\uff1b Hesse\u6cd5\u7ebf\u5f0f\uff1a r = xcos\\theta+ysin\\theta r = xcos\\theta+ysin\\theta \uff0c \u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u6761\u76f4\u7ebf\u90fd\u4e0ehough\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9 (r,\\theta) (r,\\theta) \u5173\u8054\u3002 \u5bf9\u4e8e\u76f4\u7ebf\u68c0\u6d4b\uff0cOpenCV\u63d0\u4f9b\u4e86\u4e24\u79cdHough\u53d8\u6362\u5f62\u5f0f\u3002\u5176\u4e2d\uff0c\u6807\u51c6\u7248\u672c\u4e3a cv2.HoughLines \uff0c\u8f93\u5165\u4e3a\u8fb9\u7f18\u56fe\u50cf\uff0c\u8f93\u51fa\u4e3a [float,float] \u5f62\u5f0f\u7684 narray \uff0c\u6bcf\u4e2a\u503c\u8868\u793a\u4e00\u6761\u68c0\u6d4b\u76f4\u7ebf\u7684 (r,\\theta) (r,\\theta) . \u6982\u7387Hough\u53d8\u6362\u7248\u672c\u4e3a cv2.HoughLinesP , \u6982\u7387Hough\u53d8\u6362\u4e3a\u4e86\u89e3\u51b3\u50cf\u7d20\u5076\u7136\u6240\u9020\u6210\u7684\u865a\u5047\u68c0\u6d4b\uff0c\u53ea\u68c0\u6d4b\u5206\u6bb5\u76f4\u7ebf\u800c\u4e0d\u662f\u8d2f\u7a7f\u6574\u4e2a\u56fe\u50cf\u7684\u76f4\u7ebf\u3002 # \u6807\u51c6Hough\u53d8\u6362 lines = cv2 . HoughLines ( image , rho , theta , threshold , min_theta , max_theta ) image: \u8fb9\u7f18\u56fe\u50cf(\u4e8c\u503c\u56fe\u50cf); rho: \u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u8ddd\u79bb\u7cbe\u5ea6; theta: \u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u7684\u89d2\u5ea6\u7cbe\u5ea6; threshold:Hough\u7a7a\u95f4\u7684\u7d2f\u52a0\u9608\u503c\uff0c\u8d85\u8fc7\u9608\u503c\u624d\u88ab\u8ba4\u4e3a\u68c0\u6d4b\u5230\u76f4\u7ebf; # \u6982\u7387Hough\u53d8\u6362 lines = cv.HoughLinesP(image, rho, theta, threshold, minLineLength, maxLineGap) image: \u8fb9\u7f18\u56fe\u50cf(\u4e8c\u503c\u56fe\u50cf); rho: \u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u8ddd\u79bb\u7cbe\u5ea6; theta: \u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u7684\u89d2\u5ea6\u7cbe\u5ea6; threshold:Hough\u7a7a\u95f4\u7684\u7d2f\u52a0\u9608\u503c\uff0c\u8d85\u8fc7\u9608\u503c\u624d\u88ab\u8ba4\u4e3a\u68c0\u6d4b\u5230\u76f4\u7ebf; minLineLength: \u68c0\u51fa\u7ebf\u6bb5\u7684\u6700\u5c0f\u957f\u5ea6\u9608\u503c; maxLineGap:\u68c0\u51fa\u7ebf\u6bb5\u7684\u6700\u5927\u95f4\u9694\u9608\u503c,\u540c\u4e00\u884c\u70b9\u4e0e\u70b9\u4e4b\u95f4\u8fde\u63a5\u8d77\u6765\u7684\u6700\u5927\u7684\u8ddd\u79bb\u3002; Example 5 \u00b6 ''' Example 5: \u56fe\u50cf\u7ed8\u5236 ''' import os import cv2 import numpy as np os . chdir ( os . path . dirname ( __file__ )) # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( \"MyPic.png\" ) # cv2.IMREAD_COLOR image_gray = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \u521b\u5efa\u7a7a\u56fe\u50cf # image_process = np.zeros_like(image) image_process = np . zeros (( 1080 , 1920 , 3 ), np . uint8 ) # \u56fe\u50cf\u4e3a\u65e0\u7b26\u53f78\u4f4d\u6570 # \u56fe\u50cf\u8d4b\u503c image_process [ 980 : 1080 , 0 : 1920 ] = [ 0 , 0 , 255 ] image_process [ 880 : 980 , 0 : 1920 ] = [ 0 , 255 , 0 ] image_process [ 780 : 880 , 0 : 1920 ] = [ 255 , 0 , 0 ] # \u56fe\u50cf\u590d\u5236 image_process [ 480 : 780 , 0 : 1920 ] = image [ 480 : 780 , 0 : 1920 ] # \u56fe\u50cf\u6570\u503c\u5224\u65ad loc = np . where ( image [:,:, 2 ] > 200 ) image_process [ loc ] = [ 0 , 255 , 255 ] # \u56fe\u50cf\u7ed8\u5236 # \u7ed8\u5236\u76f4\u7ebf cv2 . line ( image_process ,( 0 , 0 ),( 100 , 100 ),( 255 , 0 , 255 ), 10 ) cv2 . line ( image_process ,( 100 , 100 ),( 0 , 100 ),( 255 , 0 , 255 ), 10 ) # \u7ed8\u5236\u77e9\u5f62 cv2 . rectangle ( image_process ,( 0 , 150 ),( 100 , 200 ),( 255 , 0 , 255 ), 10 ) # \u7ed8\u5236\u591a\u8fb9\u5f62 pts_1 = np . array ([[ 300 , 150 ],[ 350 , 100 ],[ 400 , 100 ],[ 450 , 150 ],[ 400 , 200 ],[ 350 , 200 ]], np . int32 ) cv2 . polylines ( image_process ,[ pts_1 ], True ,( 255 , 255 , 255 ), 5 ) # \u586b\u5145\u591a\u8fb9\u5f62 pts_2 = np . array ([[ 500 , 150 ],[ 550 , 100 ],[ 600 , 100 ],[ 650 , 150 ],[ 600 , 200 ],[ 550 , 200 ]], np . int32 ) cv2 . fillPoly ( image_process ,[ pts_2 ],( 128 , 0 , 255 )) # \u7ed8\u5236\u5706\u5f62 cv2 . circle ( image_process ,( 200 , 100 ), 100 ,( 255 , 255 , 0 ), 10 ) # \u7ed8\u5236\u6587\u5b57 cv2 . putText ( image_process , 'ABCDE_12345' , ( 200 , 300 ), cv2 . FONT_HERSHEY_SIMPLEX , 3 ,( 0 , 255 , 0 ), 5 ) # \u56fe\u50cf\u663e\u793a cv2 . namedWindow ( \"image\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_process\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . imshow ( \"image\" , image ) cv2 . imshow ( \"image_process\" , image_process ) cv2 . waitKey () Example 5 \u56fe\u50cf\u7ed8\u5236\u6548\u679c\u5c55\u793a \u56fe\u50cf\u7ed8\u5236 # \u7ed8\u5236\u76f4\u7ebf cv2 . line ( img , pt1 , pt2 , color , thickness ) # pt1\u4e3a\u8d77\u70b9,pt2\u4e3a\u7ec8\u70b9 # \u7ed8\u5236\u77e9\u5f62 cv2 . rectangle ( img , pt1 , pt2 , color , thickness ) # pt1\u4e3a\u5de6\u4e0a\u89d2,pt2\u4e3a\u53f3\u4e0b\u89d2 # \u7ed8\u5236\u5706\u5f62 cv2 . circle ( img , pt , radius , color , thickness ) # pt\u4e3a\u5706\u70b9 # \u6dfb\u52a0\u6587\u5b57 cv2 . putText ( img , str , pt , cv2 . font , fontScale , color , thickness ) # pt\u4e3a\u5de6\u4e0a\u89d2\u5750\u6807 # \u7ed8\u5236\u591a\u8fb9\u5f62 cv2 . polylines ( img ,[ pts ], isClosed , color , thickness ) # [pts]\u4e3a\u70b9\u96c6 # \u586b\u5145\u591a\u8fb9\u5f62 cv2 . fillPoly ( img ,[ pts ], color ) # [pts]\u4e3a\u70b9\u96c6 pt1,pt2:\u5173\u952e\u70b9\u4f4d\u7f6e,\u5f62\u5f0f(x,y),\u7c7b\u578btuple; color: \u989c\u8272,(v1,v2,v3)BGR\u4e09\u901a\u9053\u8272\u5f69\u503c(0~255); thickness: \u7ebf\u6761\u7c97\u7ec6; radius: \u534a\u5f84; font: \u5b57\u4f53; fontScale: \u5b57\u4f53\u5927\u5c0f; isClosed: \u591a\u8fb9\u5f62\u662f\u5426\u95ed\u5408; [pts]: \u5173\u952e\u70b9\u96c6\u5408; \u5e38\u89c1\u5b57\u4f53\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 FONT_HERSHEY_SIMPLEX \u6b63\u5e38\u5927\u5c0f\u65e0\u886c\u7ebf\u5b57\u4f53 2 FONT_HERSHEY_PLAIN \u5c0f\u53f7\u65e0\u886c\u7ebf\u5b57\u4f53 3 FONT_HERSHEY_COMPLEX \u6b63\u5e38\u5927\u5c0f\u6709\u886c\u7ebf\u5b57\u4f53 \u6ce8\u610f cv2.line(),cv2.rectangle(),cv2.circle(),cv2.putText()\u8f93\u5165\u70b9\u5e94\u4e3atuple\u7c7b\u578b; cv2.polylines(),cv2.fillPoly()\u8f93\u5165\u70b9\u96c6\u5e94\u4e3anumpy.array\u7c7b\u578b; cv2.putText()\u4e0d\u76f4\u63a5\u652f\u6301\u4e2d\u6587,\u4f7f\u7528\u65f6\u5c3d\u91cf\u907f\u514d\u4e2d\u6587\u6807\u6ce8; \u56fe\u50cf\u6570\u636e\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7\u8d4b\u503c\u8fdb\u884c\u590d\u5236\uff0c\u901a\u8fc7'='\u5bf9\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u65f6\uff0c\u5f97\u5230\u53ea\u662f\u6e90\u6570\u636e\u7684\u5f15\u7528\u5730\u5740\uff0c\u5bf9\u8d4b\u503c\u540e\u7684\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u540c\u65f6\u4e5f\u5bf9\u6e90\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539\u3002\u9700\u8981\u5728\u6e90\u56fe\u50cf\u4e0a\u8fdb\u884c\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u4f46\u4e0d\u5e0c\u671b\u7834\u574f\u539f\u59cb\u6570\u636e\u65f6\uff0c\u9700\u8981\u5bf9\u6e90\u6570\u636e\u8fdb\u884c\u8d4b\u503c. img_add_cp = img # \u5f15\u7528 img_cp = img . copy () # \u590d\u5236 Example 6 \u00b6 ''' Example 6: GUI ''' import os import cv2 import numpy as np os . chdir ( os . path . dirname ( __file__ )) # \u521b\u5efa\u753b\u5e03\u56fe\u50cf\u548c\u7a97\u53e3 img = np . zeros (( 500 , 400 , 3 ), np . uint8 ) cv2 . namedWindow ( 'image' ) # \u521b\u5efa\u5b58\u653e\u7ed8\u5236\u70b9list points = [] # \u5b9a\u4e49\u56de\u8c03\u51fd\u6570 # trackbar \u65e0\u64cd\u4f5c def trackbar_event ( object ): pass # \u9f20\u6807\u56de\u8c03\u51fd\u6570 def mouse_event ( event , x , y , flags , param ): global points if event == cv2 . EVENT_LBUTTONDOWN : points = [] if event == cv2 . EVENT_LBUTTONUP : pass if event == cv2 . EVENT_MOUSEMOVE and flags == cv2 . EVENT_FLAG_LBUTTON : points . append (( x , y )) # \u521b\u5efa\u4e09\u4e2a\u5f00\u5173\u6ed1\u52a8\u6761RBG cv2 . createTrackbar ( 'R' , 'image' , 0 , 255 , trackbar_event ) cv2 . createTrackbar ( 'B' , 'image' , 0 , 255 , trackbar_event ) cv2 . createTrackbar ( 'G' , 'image' , 0 , 255 , trackbar_event ) cv2 . setMouseCallback ( \"image\" , mouse_event ) while ( True ): r = cv2 . getTrackbarPos ( 'R' , 'image' ) g = cv2 . getTrackbarPos ( 'G' , 'image' ) b = cv2 . getTrackbarPos ( 'B' , 'image' ) img [:] = [ b , g , r ] for i in range ( len ( points ) - 1 ): cv2 . line ( img , points [ i ], points [ i + 1 ],( 255 , 255 , 255 ), 5 ) if cv2 . waitKey ( 10 ) == 27 : # ESC\u6309\u952e\u952e\u7801\u4e3a27,\u5373\u6309ESC\u540e\u9000\u51fa break cv2 . imshow ( 'image' , img ) cv2 . destroyAllWindows () Example 6 GUI\u793a\u4f8b\u6548\u679c\u5c55\u793a 1- \u56de\u8c03\u51fd\u6570 \u56de\u8c03\u51fd\u6570\u5373\u56de\u5934\u8c03\u7528\u7684\u51fd\u6570\uff0c\u4e3b\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5728\u8c03\u7528\u4f20\u8fdb\u6765\u7684\u51fd\u6570\u3002\u5f53\u7279\u5b9a\u7684\u4e8b\u4ef6\u6216\u6761\u4ef6\u53d1\u751f\u7684\u65f6\u5019\uff0c\u8c03\u7528\u8005\u4f7f\u7528\u51fd\u6570\u6307\u9488\u8c03\u7528\u56de\u8c03\u51fd\u6570\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5904\u7406 \u5e38\u7528\u9f20\u6807\u54cd\u5e94\u4e8b\u4ef6 \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 EVENT_LBUTTONDOWN \u9f20\u6807\u5de6\u51fb 2 EVENT_RBUTTONDOWN \u9f20\u6807\u53f3\u51fb 3 EVENT_MOUSEMOVE \u9f20\u6807\u79fb\u52a8 4 EVENT_LBUTTONUP \u5de6\u952e\u91ca\u653e 5 EVENT_RBUTTONUP \u53f3\u952e\u91ca\u653e 6 EVENT_LBUTTONDBLCLK \u5de6\u952e\u53cc\u51fb 7 EVENT_RBUTTONDBLCLK \u53f3\u952e\u53cc\u51fb","title":"OpenCV \u57f9\u8bad"},{"location":"2019_summer/opencv/opencv/#opencv","text":"\u7248\u672c\u4fe1\u606f Version 1.0.2 lastUpdateTime\uff1a2019-07-10 09:49 \u589e\u52a0\u7248\u672c\u4fe1\u606f; \u589e\u52a0\u4e2d\u6587\u641c\u7d22\u529f\u80fd; \u66f4\u65b0\u7b80\u4ecb; \u66f4\u65b0example 2 \u6ce8\u91ca; \u4fee\u6539example 3 \u5173\u952e\u8bcd\u9519\u8bef; \u6b64\u8d44\u6599\u4e3b\u8981\u7528\u4e8e\u57f9\u8bad\u671f\u95f4\u5e38\u7528 OpenCV \u51fd\u6570\u7684\u5feb\u901f\u4e0a\u624b\u3002\u56e0\u65f6\u95f4\u7cbe\u529b\u6709\u9650\uff0c\u8be6\u7ec6\u8d44\u6599\u8bf7\u67e5\u770b\uff1a OpenCV Documentation (Online,\u6839\u636e\u4e2a\u4eba\u5b89\u88c5\u7684\u7248\u672c\u67e5\u627e\u5bf9\u5e94\u7684\u6587\u6863) OpenCV-Python Tutorials (Online,OpenCV-python\u5b98\u65b9\u6559\u7a0b) OpenCV_Computer_Vision_with_Python (PDF\u7535\u5b50\u4e66,\u7248\u672c\u8f83\u8001,\u5bf9\u4e8e\u65b0\u7248\u672c\u53c2\u8003\u4f5c\u7528\u6709\u9650) Python Code Examples (Python \u4ee3\u7801\u793a\u4f8b\u641c\u7d22. \u8f93\u5165\u2018cv2\u2019,\u53ef\u68c0\u7d22opencv\u5e38\u89c1module\u7684\u7528\u4f8b)","title":"OpenCV \u57f9\u8bad"},{"location":"2019_summer/opencv/opencv/#_1","text":"OpenCV\u662f\u4e00\u4e2a\u5f00\u6e90(BSD license)\u8de8\u5e73\u53f0(Linux,Windows, OS_X,Android,IOS)\u8ba1\u7b97\u673a\u89c6\u89c9\u5e93; \u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00(C++,Java,Python,C#,Go); \u652f\u6301\u5404\u79cd\u5e38\u89c1\u56fe\u50cf\u5904\u7406,\u8ba1\u7b97\u673a\u89c6\u89c9,\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4ee5\u53ca\u5e94\u7528; \u5e95\u5c42\u7531C,C++\u5b9e\u73b0,\u8f7b\u91cf\u4e14\u9ad8\u6548; OpenCV-Python\u662fOpenCV\u7684python api;","title":"\u7b80\u4ecb"},{"location":"2019_summer/opencv/opencv/#_2","text":"\u65b9\u5f0f\u4e00\uff1a\u5728python\u5b89\u88c5\u76ee\u5f55\u7684Scripts\u6587\u4ef6\u5939\u4e0b,\u7528pip\u6216\u8005conda\u5de5\u5177\u5b89\u88c5\u3002 '''\u4ee5\u4e0b\u8bed\u53e5,\u6839\u636e\u9700\u8981\u9009\u62e9\u4e00\u53e5\u6267\u884c\u5373\u53ef''' # \u4f7f\u7528pip\u5de5\u5177 pip install opencv - python # \u4f7f\u7528conda\u5de5\u5177 conda install - c menpo opencv = 3.4 . 0 conda install - c conda - forge opencv = 3.4 . 0 # \u4f7f\u7528pip\u5b89\u88c5\u6307\u5b9a\u7248\u672copencv pip install opencv - python == 3.4 . 0 \u6ce8\u610f opencv3.0\u7248\u672c\u540e\u7684api\u63a5\u53e3\u5206\u6210\u4e86main module\u548cextra module\u4e24\u90e8\u5206, pip install opencv-python \u901a\u5e38\u4ec5\u5b89\u88c5\u4e86main module. \u90e8\u5206\u529f\u80fd\u5982background extraction,optical flow,object tracking\u7b49\u56e0\u4e0d\u5728main module\u4e2d\u65e0\u6cd5\u4f7f\u7528,\u9700\u8981\u901a\u8fc7 pip install opencv-contrib-python \u5b89\u88c5\u5305\u542bmain module\u548cextra module(\u5177\u4f53\u90a3\u4e9b\u529f\u80fd\u5c5e\u4e8emain module\u4e0eextra module,\u9700\u8981\u67e5\u770b\u5177\u4f53\u7248\u672c\u7684OpenCV document) \u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7wheel\u6587\u4ef6\u5b89\u88c5\u3002 \u4e0b\u8f7d\u5bf9\u5e94\u5e73\u53f0\u4e0epython\u7248\u672c\u7684wheel\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a https://pypi.org/project/opencv-contrib-python/#files \uff1b \u8fdb\u5165wheel\u6587\u4ef6\u4e0b\u8f7d\u76ee\u5f55,\u5b89\u88c5wheel\u6587\u4ef6 # \u8fdb\u5165wheel\u4e0b\u8f7d\u76ee\u5f55(\u5047\u8bbeC:\\python35\u4e3a\u6587\u4ef6\u4e0b\u8f7d\u76ee\u5f55) cd C : \\ python35 # \u6587\u4ef6\u5b89\u88c5 pip install opencv_contrib_python - 4.1 . 0.25 - cp35 - cp35m - win_amd64 . whl \u6d4b\u8bd5 import cv2 cv2 . __version__ \u7ed3\u679c\u82e5\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5219\u8868\u660e\u5b89\u88c5\u6210\u529f\u3002 \u6ce8\u610f \u8be6\u7ec6\u5b89\u88c5\u4e0e\u4f7f\u7528\u65b9\u6cd5\u4ee5\u53ca\u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6cd5\u53ef\u53c2\u8003\uff1a https://pypi.org/project/opencv-contrib-python/","title":"\u5b89\u88c5"},{"location":"2019_summer/opencv/opencv/#_3","text":"\u672c\u6b21\u57f9\u8bad\u5305\u62ec\u4ee5\u4e0b\u793a\u4f8b\u5185\u5bb9\uff1a Example 1: \u56fe\u50cf\u8bfb\u5199; Example 2: \u89c6\u9891\u8bfb\u5199; Example 3: \u56fe\u50cf\u53d8\u6362; Example 4: \u56fe\u50cf\u5206\u6790; Example 5: \u56fe\u50cf\u7ed8\u5236; Example 6: GUI; \u6240\u6709\u4ee3\u7801\u793a\u4f8b\u6587\u4ef6\u6253\u5305\u4e0b\u8f7d","title":"\u793a\u4f8b"},{"location":"2019_summer/opencv/opencv/#example-1","text":"''' Example 1\uff1a\u56fe\u50cf\u8bfb\u5165,\u663e\u793a,\u4fdd\u5b58; ''' import os import cv2 os . chdir ( os . path . dirname ( __file__ )) # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( \"MyPic.png\" ) # \u76f4\u63a5\u4ee5\u7070\u5ea6\u56fe\u5f62\u5f0f\u8f7d\u5165\u56fe\u50cf image_gray = cv2 . imread ( \"MyPic.png\" , cv2 . IMREAD_GRAYSCALE ) # \u4e0d\u53d8 image_unchange = cv2 . imread ( \"MyPic.png\" , cv2 . IMREAD_UNCHANGED ) # \u5efa\u7acb\u56fe\u50cf\u663e\u793a\u7a97\u53e3 cv2 . namedWindow ( \"display\" , cv2 . WINDOW_NORMAL ) # \u663e\u793a\u56fe\u50cf cv2 . imshow ( \"display\" , image ) # \u7b49\u5f85\u64cd\u4f5c cv2 . waitKey () # \u56fe\u50cf\u4fdd\u5b58 cv2 . imwrite ( \"MyPic.jpg\" , image ) 1- \u56fe\u50cf\u8bfb\u5165 retval = cv2 . imread ( filename , flags ) flags\u5e38\u89c1\u8bbe\u7f6e\uff1a \u5e8f\u53f7 \u5173\u952e\u5b57 \u8272\u5f69\u7a7a\u95f4 1 IMAGE_COLOR BGR 2 IMAGE_GRAYSCALE \u7070\u5ea6 3 IMAGE_UNCHANGED \u4e0e\u539f\u56fe\u76f8\u540c \u6ce8\u610f \u6587\u4ef6\u4e2d\u4e0d\u8981\u5305\u542b\u4e2d\u6587\u5b57\u7b26; OpenCV\u4ee5B,G,R\u7684\u987a\u5e8f\u8bfb\u5165\u989c\u8272\u901a\u9053, \u4e0e\u6709\u4e9b\u5e93\u4ee5RGB\u8bfb\u5165\u7684\u987a\u5e8f\u4e0d\u540c(\u5982Matplotlib). \u4e0d\u540c\u5e93\u5904\u7406\u56fe\u50cf\u65f6,\u9700\u8981\u6ce8\u610f\u5e93\u5bf9\u56fe\u50cf\u901a\u9053\u5b9a\u4e49,\u82e5\u9700\u8981RGB\u989c\u8272\u987a\u5e8f,\u5219\u9700\u8981\u5bf9\u989c\u8272\u7a7a\u95f4\u8fdb\u884c\u53d8\u6362.\u53d8\u6362\u65b9\u6cd5\u89c1 Example 3. 2- \u56fe\u50cf\u663e\u793a cv2 . namedWindow ( winname , flags ) # \u9ed8\u8ba4flags=CV_WINDOW_AUTOSIZE| CV_WINDOW_KEEPRATIO cv2 . imshow ( winname , mat ) # \u53ef\u901a\u8fc7Ctrl+C\u590d\u5236\u56fe\u50cf\u81f3\u526a\u8d34\u677f,\u901a\u8fc7Ctrl+S\u5f39\u51fa\u4fdd\u5b58\u5bf9\u8bdd\u6846 cv2 . waitKey ( delay ) # delay\u4e3a\u505c\u987f\u6beb\u79d2\u6570. 0\u8868\u793a\u7b49\u5f85\u7528\u6237\u64cd\u4f5c. namedWindow flags \u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 WINDOW_NORMAL \u7a97\u53e3\u53ef\u8c03 2 WINDOW_AUTOSIZE \u7a97\u53e3\u81ea\u9002\u5e94 3 WINDOW_FREERATIO \u4e0d\u4fdd\u6301\u6a2a\u7eb5\u6bd4 4 WINDOW_KEEPRATIO \u4fdd\u6301\u6a2a\u7eb5\u6bd4 3- \u56fe\u50cf\u4fdd\u5b58 retval = cv2.imwrite(filename,image,flags) \u63d0\u793a \u4e5f\u53ef\u4ee5\u5728\u663e\u793a\u56fe\u50cf\u7684\u7a97\u53e3\u4e2d,\u901a\u8fc7\u952e\u76d8\u6309\u4e0b Ctrl + S ,\u5728\u5f39\u51fa\u7684\u6587\u4ef6\u4fdd\u5b58\u5bf9\u8bdd\u6846\u4e2d\u8f93\u5165\u4fdd\u5b58\u6587\u4ef6\u7684\u8def\u5f84\u4e0e\u540d\u79f0\u4fdd\u5b58.","title":"Example 1"},{"location":"2019_summer/opencv/opencv/#example-2","text":"''' Example 2: \u89c6\u9891\u8bfb\u5165\u4e0e\u4fdd\u5b58 ''' import os import cv2 os . chdir ( os . path . dirname ( __file__ )) # \u89c6\u9891\u8bfb\u5165 # \u8bfb\u5165\u672c\u5730\u89c6\u9891\u6587\u4ef6 cameraCapture = cv2 . VideoCapture ( \"MyVideo.mp4\" ) # \u8bfb\u5165\u672c\u5730\u6444\u50cf\u673a\u89c6\u9891\u6d41 cameraCapture = cv2 . VideoCapture ( 0 ) # \u8bfb\u5165\u7f51\u7edc\u89c6\u9891\u6d41(RTSP\u534f\u8bae)\u3010\u5927\u96c4\u5154\u52a8\u753b\u7247-\u70b9\u64ad\u3011 cameraCapture = cv2 . VideoCapture ( \"rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov\" ) # \u8bfb\u5165\u7f51\u7edc\u89c6\u9891\u6d41(RTMP\u534f\u8bae)\u3010\u9999\u6e2f\u536b\u89c6-\u76f4\u64ad\u3011 cameraCapture = cv2 . VideoCapture ( \"rtmp://live.hkstv.hk.lxdns.com/live/hks1\" ) # \u8bfb\u5165\u7f51\u7edc\u89c6\u9891\u6d41(HTTP\u534f\u8bae)\u3010CCTV1-\u76f4\u64ad\u3011 cameraCapture = cv2 . VideoCapture ( \"http://223.110.242.130:6610/gitv/live1/G_CCTV-1-HQ/1.m3u8\" ) cv2 . namedWindow ( \"display\" , cv2 . WINDOW_NORMAL ) #\u89c6\u9891\u4fdd\u5b58 fourcc = cv2 . VideoWriter_fourcc ( 'X' , 'V' , 'I' , 'D' ) # \u89c6\u9891\u7f16\u7801\u914d\u7f6e videoWriter = cv2 . VideoWriter ( 'output.mp4' , fourcc , 25 , ( 480 , 320 )) # \u89c6\u9891\u4fdd\u5b58\u914d\u7f6e # \u8fde\u7eed\u64ad\u653e\u89c6\u9891\u5e27\u56fe\u50cf while True : # \u4ece\u89c6\u9891\u6d41\u4e2d\u8bfb\u53d6\u4e00\u5e27\u56fe\u50cf success , frame = cameraCapture . read () if success : # \u663e\u793a\u56fe\u50cf cv2 . imshow ( \"display\" , frame ) # \u5c06\u5e27\u56fe\u50cf\u6dfb\u52a0\u5230\u89c6\u9891\u4fdd\u5b58\u5e8f\u5217\u4e2d img = cv2 . resize ( frame ,( 480 , 320 )) # \u975e\u5fc5\u987b videoWriter . write ( img ) # \u4ea4\u4e92 if cv2 . waitKey ( 1 ) == 27 : # \u6309'ESC'\u952e\u540e\u9000\u51fa\u7a0b\u5e8f break # \u89c6\u9891\u7ed3\u675f/\u8bfb\u53d6\u9519\u8bef\u540e\u9000\u51fa else : break # \u91ca\u653ewriter videoWriter . release () 1- \u89c6\u9891\u8bfb\u5165 OpenCV\u53ef\u8bfb\u5165\u672c\u5730\u56fe\u7247\u5e8f\u5217\u3001\u89c6\u9891\u6587\u4ef6\u3001\u6444\u50cf\u5934\u89c6\u9891\u6d41\u4ee5\u53ca\u7f51\u7edc\u89c6\u9891\u6d41\u6570\u636e(\u5982RTSP\u3001RTMP\u3001HTTP\u3001UDP) # \u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 < VideoCapture object > = cv2 . VideoCapture () < VideoCapture object > = cv2 . VideoCapture ( filename ) < VideoCapture object > = cv2 . VideoCapture ( url ) # \u8bfb\u5165\u65b9\u6cd5 success , frame = videoCaptureobject . read () # \u8bfb\u5165\u4e00\u5e27\u56fe\u50cf success: \u89c6\u9891\u5e27\u8bfb\u5165\u72b6\u6001, frame: \u89c6\u9891\u5e27\u56fe\u50cf 2- \u89c6\u9891\u4fdd\u5b58 # \u7f16\u7801\u8bbe\u7f6e fourcc = cv2 . VideoWriter_fourcc ( c1 , c2 , c3 , c4 ) # \u4fdd\u5b58\u8bbe\u7f6e < VideoWriter object > = cv2 . VideoWriter ( filename , fourcc , fps , frameSize ) c1,c2,c3,c4\u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u7f16\u7801 1 cv2.VideoWriter_fourcc('I','4','2','0') YUV\u7f16\u7801 2 cv2.VideoWriter_fourcc('P','I','M','1') MPEG-1\u7f16\u7801 3 cv2.VideoWriter_fourcc('X','V','I','D') MPEG-4\u7f16\u7801 4 cv2.VideoWriter_fourcc('F','L','V','1') Flash\u7f16\u7801","title":"Example 2"},{"location":"2019_summer/opencv/opencv/#example-3","text":"''' Example 3: \u56fe\u50cf\u53d8\u6362 ''' import os import cv2 import numpy as np os . chdir ( os . path . dirname ( __file__ )) # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( \"MyPic.png\" ) # cv2.IMREAD_COLOR # \u8272\u5f69\u7a7a\u95f4\u53d8\u6362 image_gray = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \u5c3a\u5ea6\u53d8\u6362 image_scale = cv2 . resize ( image ,( 320 , 480 )) # \u4f4d\u79fb M1 = np . float32 ([[ 1 , 0 , 100 ],[ 0 , 1 , 50 ]]) image_mov = cv2 . warpAffine ( image , M1 ,( image . shape [ 1 ], image . shape [ 0 ])) # \u56fe\u50cf\u65cb\u8f6c print ( image . shape ) M2 = cv2 . getRotationMatrix2D (( 960 , 540 ), 10 , 1 ) image_rot = cv2 . warpAffine ( image , M2 ,( image . shape [ 1 ], image . shape [ 0 ])) # \u56fe\u50cf\u663e\u793a cv2 . namedWindow ( \"image\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_gray\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_scale\" ) cv2 . namedWindow ( \"image_mov\" , cv2 . WINDOW_NORMAL ) cv2 . namedWindow ( \"image_rot\" , cv2 . WINDOW_NORMAL ) cv2 . imshow ( \"image\" , image ) cv2 . imshow ( \"image_gray\" , image_gray ) cv2 . imshow ( \"image_scale\" , image_scale ) cv2 . imshow ( \"image_mov\" , image_mov ) cv2 . imshow ( \"image_rot\" , image_rot ) cv2 . waitKey () Example 3 \u56fe\u50cf\u53d8\u6362\u6548\u679c\u5c55\u793a 1- \u8272\u5f69\u7a7a\u95f4\u53d8\u6362 dst = cv2 . cvtColor ( src , flags ) cvtColor flags \u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 COLOR_BGR2RGB BGR\u987a\u5e8f\u8f6cRGB 2 COLOR_BGR2GRAY \u8f6c\u4e3a\u7070\u5ea6\u56fe 2- \u56fe\u50cf\u7f29\u653e dst = cv2 . resize ( src , dsize , dst , fx , fy , interpolation ) #\u9ed8\u8ba4\u503c:fx=0,fy=0,interpolation=cv2.INTER_LINEAR dsize : \u8f93\u51fa\u56fe\u50cf\u7684\u5c3a\u5bf8(w,h) fx : \u6a2a\u8f74\u5c3a\u5ea6\u56e0\u5b50,\u5982\u679c fx=0 ,\u5219 double(dsize.width/src.cols) double(dsize.width/src.cols) fy : \u7eb5\u8f74\u5c3a\u5ea6\u56e0\u5b50,\u5982\u679c fy=0 ,\u5219 double(dsize.height/src.rows) double(dsize.height/src.rows) resize interpolation \u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 INTER_NEAREST \u90bb\u8fd1\u63d2\u503c 2 INTER_LINEAR \u53cc\u7ebf\u6027\u63d2\u503c(\u6548\u679c\u4e00\u822c,\u5feb) 3 INTER_CUBIC \u53cc\u4e09\u6b21\u63d2\u503c(\u6548\u679c\u597d,\u6162) 3- \u4eff\u5c04\u53d8\u6362 \u4eff\u5c04\u53d8\u6362\u5373\u4fdd\u8bc1\u7ebf\u5171\u70b9\u3001\u70b9\u5171\u7ebf\u4ee5\u53ca\u7ebf\u95f4\u5e73\u884c\u5173\u7cfb\u4e0d\u53d8\u7684\u51e0\u4f55\u53d8\u6362\u3002\u5305\u62ec\u5e73\u79fb\u3001\u7f29\u653e\u3001\u526a\u5207\u3001\u65cb\u8f6c\u7b49\u6548\u679c\u3002 dst = cv2.warpAffine(src, M, dsize) [x',y',1] = [x,y,1]\\times\\left[\\begin{matrix}M_{11}&M_{12}&M_{13}\\\\M_{21}&M_{22}&M_{23}\\\\0&0&1\\end{matrix}\\right] [x',y',1] = [x,y,1]\\times\\left[\\begin{matrix}M_{11}&M_{12}&M_{13}\\\\M_{21}&M_{22}&M_{23}\\\\0&0&1\\end{matrix}\\right] \\left\\{ \\begin{aligned} x'=M_{11}x+M_{12}y+M_{13} \\\\ y'=M_{21}x+M_{22}y+M_{23} \\end{aligned} \\right. \\left\\{ \\begin{aligned} x'=M_{11}x+M_{12}y+M_{13} \\\\ y'=M_{21}x+M_{22}y+M_{23} \\end{aligned} \\right. \u53d8\u6362\u77e9\u9635\u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u53d8\u6362\u77e9\u9635 \u5c5e\u6027 1 \\left[\\begin{matrix}1&0&0\\\\0&1&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}1&0&0\\\\0&1&0\\\\0&0&1 \\end{matrix}\\right] \u4e0d\u53d8 2 \\left[\\begin{matrix}1&0&X\\\\0&1&Y\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}1&0&X\\\\0&1&Y\\\\0&0&1 \\end{matrix}\\right] x \u65b9\u5411\u5e73\u79fbX, y \u65b9\u5411\u5e73\u79fbY 3 \\left[\\begin{matrix}W&0&0\\\\0&H&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}W&0&0\\\\0&H&0\\\\0&0&1 \\end{matrix}\\right] x \u65b9\u5411\u653e\u5927W\u500d, y \u65b9\u5411\u653e\u5927H\u500d 4 \\left[\\begin{matrix}cos\\theta&sin\\theta&0\\\\-sin\\theta&cos\\theta&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}cos\\theta&sin\\theta&0\\\\-sin\\theta&cos\\theta&0\\\\0&0&1 \\end{matrix}\\right] \u4ee5(0,0)\u4e3a\u57fa\u70b9,\u987a\u65f6\u9488\u65cb\u8f6c \\theta \\theta 5 \\left[\\begin{matrix}1&0&0\\\\0&-1&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}1&0&0\\\\0&-1&0\\\\0&0&1 \\end{matrix}\\right] \u5782\u76f4\u7ffb\u8f6c 6 \\left[\\begin{matrix}-1&0&0\\\\0&1&0\\\\0&0&1 \\end{matrix}\\right] \\left[\\begin{matrix}-1&0&0\\\\0&1&0\\\\0&0&1 \\end{matrix}\\right] \u6c34\u5e73\u7ffb\u8f6c","title":"Example 3"},{"location":"2019_summer/opencv/opencv/#example-4","text":"''' Example 4: \u56fe\u50cf\u5206\u6790 ''' import os import cv2 import numpy as np os . chdir ( os . path . dirname ( __file__ )) # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( \"MyPic.png\" ) # cv2.IMREAD_COLOR image_gray = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \u56fe\u50cf\u5206\u5272 ret , image_bw = cv2 . threshold ( image_gray , 127 , 255 , cv2 . THRESH_BINARY ) # \u8fb9\u7f18\u68c0\u6d4b image_canny = cv2 . Canny ( image_gray , 100 , 300 ) # Hough\u53d8\u6362 minLineLength = 100 maxLineGap = 20 lines = cv2 . HoughLinesP ( image_canny , 1 , np . pi / 180 , 100 , minLineLength , maxLineGap ) image_hough = image . copy () for elem in lines : x1 , y1 , x2 , y2 = elem [ 0 ] cv2 . line ( image_hough , ( x1 , y1 ), ( x2 , y2 ), ( 0 , 255 , 0 ), 5 ) # \u89d2\u70b9 # \u56fe\u50cf\u663e\u793a cv2 . namedWindow ( \"image\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_bw\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_canny\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_hough\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . imshow ( \"image\" , image ) cv2 . imshow ( \"image_bw\" , image_bw ) cv2 . imshow ( \"image_canny\" , image_canny ) cv2 . imshow ( \"image_hough\" , image_hough ) cv2 . waitKey () Example 4 \u56fe\u50cf\u5206\u6790\u6548\u679c\u5c55\u793a 1- \u56fe\u50cf\u5206\u5272 \u56fe\u50cf\u5206\u5272\u5c31\u662f\u63d0\u53d6\u56fe\u50cf\u611f\u5174\u8da3\u76ee\u6807/\u533a\u57df\u7684\u8fc7\u7a0b. # \u56fa\u5b9a\u9608\u503c\u4e8c\u503c\u5316 ret, dst = cv2.threshold(src, thresh, maxval,flags) #thresh\u4e3a\u9608\u503c,maxval\u5f53\u50cf\u7d20\u503c\u8d85\u8fc7\u4e86\u9608\u503c\u65f6\u7684\u8bbe\u5b9a\u503c,flags\u4e3a\u64cd\u4f5c\u7c7b\u578b threshold flags \u5e38\u89c1\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 THRESH_BINARY src(x,y)>thresh,dst(x,y)=max_value,\u53cd\u4e4bdst(x,y)=0 2 THRESH_BINARY_INV src(x,y)>thresh,dst(x,y)=0,\u53cd\u4e4bdst(x,y)=max_value 3 THRESH_TRUNC src(x,y)>thresh,dst(x,y)=max_value,\u53cd\u4e4bdst(x,y)=src(x,y) 4 THRESH_TOZERO src(x,y)>thresh,dst(x,y)=src(x,y),\u53cd\u4e4bdst(x,y)=0 5 THRESH_TOZERO_INV src(x,y)>thesh,dst(x,y)=0,\u53cd\u4e4bdst(x,y)=src(x,y) 2- \u8fb9\u7f18\u68c0\u6d4b \u8fb9\u7f18\u68c0\u6d4b\u7684\u76ee\u7684\u662f\u8bc6\u522b\u56fe\u50cf\u4e2d\u4eae\u5ea6\u53d8\u5316\u8f83\u4e3a\u660e\u663e\u7684\u70b9\u3002 \u5e38\u89c1\u7684\u65b9\u6cd5\u6709\u4e09\u79cd\uff0c Sobel \u7b97\u5b50(\u4e00\u9636\u5fae\u5206\u7b97\u5b50)\uff0c Laplacian \u7b97\u5b50(\u4e8c\u9636\u5fae\u5206\u7b97\u5b50)\uff0c Canny \u7b97\u5b50\u3002 Canny\u7b97\u5b50\u7684\u8ba1\u7b97\u6b65\u9aa4\uff1a \u9ad8\u65af\u6ee4\u6ce2\u5e73\u6ed1\uff1b H_{ij}=\\frac{1}{2\\pi\\sigma^2}exp(-\\frac{(i-(k+1))^2+(j-(k+1))^2}{2\\sigma^2});1\\leq i,j\\leq (2k+1) H_{ij}=\\frac{1}{2\\pi\\sigma^2}exp(-\\frac{(i-(k+1))^2+(j-(k+1))^2}{2\\sigma^2});1\\leq i,j\\leq (2k+1) e = H*A e = H*A \u8ba1\u7b97\u5df2\u9636\u504f\u5bfc\u7684\u5e45\u503c\u548c\u65b9\u5411\uff1b G = \\sqrt{G_x^2+G_y^2} , \\theta=arctan(\\frac{G_y}{G_x}) G = \\sqrt{G_x^2+G_y^2} , \\theta=arctan(\\frac{G_y}{G_x}) x,y \u65b9\u5411\u7684Sobel\u7b97\u5b50 S_x= \\left[ \\begin{matrix}1&2&1\\\\0&0&0\\\\-1&-2&-1\\end{matrix} \\right], S_y= \\left[ \\begin{matrix}-1&0&1\\\\-2&0&2\\\\-1&0&1\\end{matrix} \\right] S_x= \\left[ \\begin{matrix}1&2&1\\\\0&0&0\\\\-1&-2&-1\\end{matrix} \\right], S_y= \\left[ \\begin{matrix}-1&0&1\\\\-2&0&2\\\\-1&0&1\\end{matrix} \\right] G_x=S_x*A, G_y=S_y*A G_x=S_x*A, G_y=S_y*A \u5bf9\u68af\u5ea6\u5e45\u503c\u8fdb\u884c\u975e\u6700\u5927\u503c\u6291\u5236\uff1b \u7528\u53cc\u9608\u503c\u7b97\u6cd5\u68c0\u6d4b\u548c\u8fde\u63a5\u8fb9\u7f18. edges = cv2 . Canny ( image , threshold1 , threshold2 , apertureSize = 3 , L2gradient = false ) threshold1\uff1a\u53cc\u9608\u503c\u7b97\u6cd5\u4e2d\u7684\u9608\u503c1\uff0c\u4f4e\u4e8e\u9608\u503c1\u7684\u786e\u5b9a\u4e0d\u662f\u8fb9\u7f18\uff1bthreshold2\uff1a\u53cc\u9608\u503c\u7b97\u6cd5\u4e2d\u7684\u9608\u503c2\uff0c\u9ad8\u4e8e\u9608\u503c2\u7684\u786e\u5b9a\u662f\u8fb9\u7f18\u3002\u5728\u9608\u503c1\u4e0e\u9608\u503c2\u4e4b\u95f4\u7684\u50cf\u7d20\u70b9\uff0c\u82e5\u4e0e\u786e\u5b9a\u8fb9\u7f18\u76f8\u63a5\uff0c\u5219\u8ba4\u4e3a\u662f\u8fb9\u7f18\u5426\u5219\u4e0d\u662f\u3002 apertureSize\uff1aSobel\u7b97\u5b50\u7684\u5927\u5c0f; L2gradient\uff1aL2\u8303\u6570\u8ba1\u7b97\u68af\u5ea6\u6807\u8bc6\uff0c\u82e5\u4e3aTrue\uff0c\u5219\u4f7f\u7528L2\u8303\u6570\u8ba1\u7b97\u68af\u5ea6\uff0c\u7ed3\u679c\u7cbe\u5ea6\u66f4\u9ad8\uff1b\u5426\u5219\u4f7f\u7528L1\u8303\u6570\u8ba1\u7b97\u68af\u5ea6\u3002 L_2 norm = \\sqrt{(\\frac{dI}{dx})^2+(\\frac{dI}{dy})^2} L_2 norm = \\sqrt{(\\frac{dI}{dx})^2+(\\frac{dI}{dy})^2} \uff1b L_1 norm = |\\frac{dI}{dx}|+|\\frac{dI}{dy}| L_1 norm = |\\frac{dI}{dx}|+|\\frac{dI}{dy}| \u6ce8\u610f \u8fb9\u7f18\u68c0\u6d4b\u57fa\u4e8e\u7070\u5ea6\u56fe\u8fdb\u884c\u8ba1\u7b97\uff0c\u8ba1\u7b97\u4e4b\u524d\u5148\u5c06\u8272\u5f69\u7a7a\u95f4\u8f6c\u4e3a\u7070\u5ea6\u6216\u4ee5\u5355\u8272\u5f69\u901a\u9053\u8ba1\u7b97. 3- Hough\u53d8\u6362 Hough\u53d8\u6362\u662f\u68c0\u6d4b\u5177\u6709\u7279\u5b9a\u53c2\u6570\u5f62\u72b6\u7684\u65b9\u6cd5\u3002\u5176\u539f\u7406\u4e3a\u5c06\u5f62\u72b6\u53c2\u6570\u5728hough\u7a7a\u95f4\u4e2d\u8fdb\u884c\u6295\u7968\uff0c\u6295\u7968\u7ed3\u679c\u4e2d\u7684\u5c40\u90e8\u6700\u5927\u503c\u5373\u4e3a\u6240\u8981\u63d0\u53d6\u5f62\u72b6\u7684\u53c2\u6570\u3002 Hough\u53d8\u6362\u6700\u7b80\u5355\u7684\u5e94\u7528\u5c31\u662f\u68c0\u6d4b\u76f4\u7ebf\u3002 \u659c\u622a\u5f0f\uff1a y = mx + b y = mx + b \uff0c \u5219\u53c2\u6570\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9(m,b)\u5c31\u53ef\u4ee5\u8868\u793a\u4e00\u6761\u76f4\u7ebf\uff1b Hesse\u6cd5\u7ebf\u5f0f\uff1a r = xcos\\theta+ysin\\theta r = xcos\\theta+ysin\\theta \uff0c \u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u6761\u76f4\u7ebf\u90fd\u4e0ehough\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9 (r,\\theta) (r,\\theta) \u5173\u8054\u3002 \u5bf9\u4e8e\u76f4\u7ebf\u68c0\u6d4b\uff0cOpenCV\u63d0\u4f9b\u4e86\u4e24\u79cdHough\u53d8\u6362\u5f62\u5f0f\u3002\u5176\u4e2d\uff0c\u6807\u51c6\u7248\u672c\u4e3a cv2.HoughLines \uff0c\u8f93\u5165\u4e3a\u8fb9\u7f18\u56fe\u50cf\uff0c\u8f93\u51fa\u4e3a [float,float] \u5f62\u5f0f\u7684 narray \uff0c\u6bcf\u4e2a\u503c\u8868\u793a\u4e00\u6761\u68c0\u6d4b\u76f4\u7ebf\u7684 (r,\\theta) (r,\\theta) . \u6982\u7387Hough\u53d8\u6362\u7248\u672c\u4e3a cv2.HoughLinesP , \u6982\u7387Hough\u53d8\u6362\u4e3a\u4e86\u89e3\u51b3\u50cf\u7d20\u5076\u7136\u6240\u9020\u6210\u7684\u865a\u5047\u68c0\u6d4b\uff0c\u53ea\u68c0\u6d4b\u5206\u6bb5\u76f4\u7ebf\u800c\u4e0d\u662f\u8d2f\u7a7f\u6574\u4e2a\u56fe\u50cf\u7684\u76f4\u7ebf\u3002 # \u6807\u51c6Hough\u53d8\u6362 lines = cv2 . HoughLines ( image , rho , theta , threshold , min_theta , max_theta ) image: \u8fb9\u7f18\u56fe\u50cf(\u4e8c\u503c\u56fe\u50cf); rho: \u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u8ddd\u79bb\u7cbe\u5ea6; theta: \u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u7684\u89d2\u5ea6\u7cbe\u5ea6; threshold:Hough\u7a7a\u95f4\u7684\u7d2f\u52a0\u9608\u503c\uff0c\u8d85\u8fc7\u9608\u503c\u624d\u88ab\u8ba4\u4e3a\u68c0\u6d4b\u5230\u76f4\u7ebf; # \u6982\u7387Hough\u53d8\u6362 lines = cv.HoughLinesP(image, rho, theta, threshold, minLineLength, maxLineGap) image: \u8fb9\u7f18\u56fe\u50cf(\u4e8c\u503c\u56fe\u50cf); rho: \u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u8ddd\u79bb\u7cbe\u5ea6; theta: \u4ee5\u5f27\u5ea6\u4e3a\u5355\u4f4d\u7684\u89d2\u5ea6\u7cbe\u5ea6; threshold:Hough\u7a7a\u95f4\u7684\u7d2f\u52a0\u9608\u503c\uff0c\u8d85\u8fc7\u9608\u503c\u624d\u88ab\u8ba4\u4e3a\u68c0\u6d4b\u5230\u76f4\u7ebf; minLineLength: \u68c0\u51fa\u7ebf\u6bb5\u7684\u6700\u5c0f\u957f\u5ea6\u9608\u503c; maxLineGap:\u68c0\u51fa\u7ebf\u6bb5\u7684\u6700\u5927\u95f4\u9694\u9608\u503c,\u540c\u4e00\u884c\u70b9\u4e0e\u70b9\u4e4b\u95f4\u8fde\u63a5\u8d77\u6765\u7684\u6700\u5927\u7684\u8ddd\u79bb\u3002;","title":"Example 4"},{"location":"2019_summer/opencv/opencv/#example-5","text":"''' Example 5: \u56fe\u50cf\u7ed8\u5236 ''' import os import cv2 import numpy as np os . chdir ( os . path . dirname ( __file__ )) # \u56fe\u50cf\u8bfb\u5165 image = cv2 . imread ( \"MyPic.png\" ) # cv2.IMREAD_COLOR image_gray = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \u521b\u5efa\u7a7a\u56fe\u50cf # image_process = np.zeros_like(image) image_process = np . zeros (( 1080 , 1920 , 3 ), np . uint8 ) # \u56fe\u50cf\u4e3a\u65e0\u7b26\u53f78\u4f4d\u6570 # \u56fe\u50cf\u8d4b\u503c image_process [ 980 : 1080 , 0 : 1920 ] = [ 0 , 0 , 255 ] image_process [ 880 : 980 , 0 : 1920 ] = [ 0 , 255 , 0 ] image_process [ 780 : 880 , 0 : 1920 ] = [ 255 , 0 , 0 ] # \u56fe\u50cf\u590d\u5236 image_process [ 480 : 780 , 0 : 1920 ] = image [ 480 : 780 , 0 : 1920 ] # \u56fe\u50cf\u6570\u503c\u5224\u65ad loc = np . where ( image [:,:, 2 ] > 200 ) image_process [ loc ] = [ 0 , 255 , 255 ] # \u56fe\u50cf\u7ed8\u5236 # \u7ed8\u5236\u76f4\u7ebf cv2 . line ( image_process ,( 0 , 0 ),( 100 , 100 ),( 255 , 0 , 255 ), 10 ) cv2 . line ( image_process ,( 100 , 100 ),( 0 , 100 ),( 255 , 0 , 255 ), 10 ) # \u7ed8\u5236\u77e9\u5f62 cv2 . rectangle ( image_process ,( 0 , 150 ),( 100 , 200 ),( 255 , 0 , 255 ), 10 ) # \u7ed8\u5236\u591a\u8fb9\u5f62 pts_1 = np . array ([[ 300 , 150 ],[ 350 , 100 ],[ 400 , 100 ],[ 450 , 150 ],[ 400 , 200 ],[ 350 , 200 ]], np . int32 ) cv2 . polylines ( image_process ,[ pts_1 ], True ,( 255 , 255 , 255 ), 5 ) # \u586b\u5145\u591a\u8fb9\u5f62 pts_2 = np . array ([[ 500 , 150 ],[ 550 , 100 ],[ 600 , 100 ],[ 650 , 150 ],[ 600 , 200 ],[ 550 , 200 ]], np . int32 ) cv2 . fillPoly ( image_process ,[ pts_2 ],( 128 , 0 , 255 )) # \u7ed8\u5236\u5706\u5f62 cv2 . circle ( image_process ,( 200 , 100 ), 100 ,( 255 , 255 , 0 ), 10 ) # \u7ed8\u5236\u6587\u5b57 cv2 . putText ( image_process , 'ABCDE_12345' , ( 200 , 300 ), cv2 . FONT_HERSHEY_SIMPLEX , 3 ,( 0 , 255 , 0 ), 5 ) # \u56fe\u50cf\u663e\u793a cv2 . namedWindow ( \"image\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . namedWindow ( \"image_process\" , cv2 . WINDOW_NORMAL ) # \u7a97\u53e3\u652f\u6301\u624b\u52a8\u8c03\u6574\u5c3a\u5ea6 cv2 . imshow ( \"image\" , image ) cv2 . imshow ( \"image_process\" , image_process ) cv2 . waitKey () Example 5 \u56fe\u50cf\u7ed8\u5236\u6548\u679c\u5c55\u793a \u56fe\u50cf\u7ed8\u5236 # \u7ed8\u5236\u76f4\u7ebf cv2 . line ( img , pt1 , pt2 , color , thickness ) # pt1\u4e3a\u8d77\u70b9,pt2\u4e3a\u7ec8\u70b9 # \u7ed8\u5236\u77e9\u5f62 cv2 . rectangle ( img , pt1 , pt2 , color , thickness ) # pt1\u4e3a\u5de6\u4e0a\u89d2,pt2\u4e3a\u53f3\u4e0b\u89d2 # \u7ed8\u5236\u5706\u5f62 cv2 . circle ( img , pt , radius , color , thickness ) # pt\u4e3a\u5706\u70b9 # \u6dfb\u52a0\u6587\u5b57 cv2 . putText ( img , str , pt , cv2 . font , fontScale , color , thickness ) # pt\u4e3a\u5de6\u4e0a\u89d2\u5750\u6807 # \u7ed8\u5236\u591a\u8fb9\u5f62 cv2 . polylines ( img ,[ pts ], isClosed , color , thickness ) # [pts]\u4e3a\u70b9\u96c6 # \u586b\u5145\u591a\u8fb9\u5f62 cv2 . fillPoly ( img ,[ pts ], color ) # [pts]\u4e3a\u70b9\u96c6 pt1,pt2:\u5173\u952e\u70b9\u4f4d\u7f6e,\u5f62\u5f0f(x,y),\u7c7b\u578btuple; color: \u989c\u8272,(v1,v2,v3)BGR\u4e09\u901a\u9053\u8272\u5f69\u503c(0~255); thickness: \u7ebf\u6761\u7c97\u7ec6; radius: \u534a\u5f84; font: \u5b57\u4f53; fontScale: \u5b57\u4f53\u5927\u5c0f; isClosed: \u591a\u8fb9\u5f62\u662f\u5426\u95ed\u5408; [pts]: \u5173\u952e\u70b9\u96c6\u5408; \u5e38\u89c1\u5b57\u4f53\u8bbe\u7f6e \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 FONT_HERSHEY_SIMPLEX \u6b63\u5e38\u5927\u5c0f\u65e0\u886c\u7ebf\u5b57\u4f53 2 FONT_HERSHEY_PLAIN \u5c0f\u53f7\u65e0\u886c\u7ebf\u5b57\u4f53 3 FONT_HERSHEY_COMPLEX \u6b63\u5e38\u5927\u5c0f\u6709\u886c\u7ebf\u5b57\u4f53 \u6ce8\u610f cv2.line(),cv2.rectangle(),cv2.circle(),cv2.putText()\u8f93\u5165\u70b9\u5e94\u4e3atuple\u7c7b\u578b; cv2.polylines(),cv2.fillPoly()\u8f93\u5165\u70b9\u96c6\u5e94\u4e3anumpy.array\u7c7b\u578b; cv2.putText()\u4e0d\u76f4\u63a5\u652f\u6301\u4e2d\u6587,\u4f7f\u7528\u65f6\u5c3d\u91cf\u907f\u514d\u4e2d\u6587\u6807\u6ce8; \u56fe\u50cf\u6570\u636e\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7\u8d4b\u503c\u8fdb\u884c\u590d\u5236\uff0c\u901a\u8fc7'='\u5bf9\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u65f6\uff0c\u5f97\u5230\u53ea\u662f\u6e90\u6570\u636e\u7684\u5f15\u7528\u5730\u5740\uff0c\u5bf9\u8d4b\u503c\u540e\u7684\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u540c\u65f6\u4e5f\u5bf9\u6e90\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539\u3002\u9700\u8981\u5728\u6e90\u56fe\u50cf\u4e0a\u8fdb\u884c\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u4f46\u4e0d\u5e0c\u671b\u7834\u574f\u539f\u59cb\u6570\u636e\u65f6\uff0c\u9700\u8981\u5bf9\u6e90\u6570\u636e\u8fdb\u884c\u8d4b\u503c. img_add_cp = img # \u5f15\u7528 img_cp = img . copy () # \u590d\u5236","title":"Example 5"},{"location":"2019_summer/opencv/opencv/#example-6","text":"''' Example 6: GUI ''' import os import cv2 import numpy as np os . chdir ( os . path . dirname ( __file__ )) # \u521b\u5efa\u753b\u5e03\u56fe\u50cf\u548c\u7a97\u53e3 img = np . zeros (( 500 , 400 , 3 ), np . uint8 ) cv2 . namedWindow ( 'image' ) # \u521b\u5efa\u5b58\u653e\u7ed8\u5236\u70b9list points = [] # \u5b9a\u4e49\u56de\u8c03\u51fd\u6570 # trackbar \u65e0\u64cd\u4f5c def trackbar_event ( object ): pass # \u9f20\u6807\u56de\u8c03\u51fd\u6570 def mouse_event ( event , x , y , flags , param ): global points if event == cv2 . EVENT_LBUTTONDOWN : points = [] if event == cv2 . EVENT_LBUTTONUP : pass if event == cv2 . EVENT_MOUSEMOVE and flags == cv2 . EVENT_FLAG_LBUTTON : points . append (( x , y )) # \u521b\u5efa\u4e09\u4e2a\u5f00\u5173\u6ed1\u52a8\u6761RBG cv2 . createTrackbar ( 'R' , 'image' , 0 , 255 , trackbar_event ) cv2 . createTrackbar ( 'B' , 'image' , 0 , 255 , trackbar_event ) cv2 . createTrackbar ( 'G' , 'image' , 0 , 255 , trackbar_event ) cv2 . setMouseCallback ( \"image\" , mouse_event ) while ( True ): r = cv2 . getTrackbarPos ( 'R' , 'image' ) g = cv2 . getTrackbarPos ( 'G' , 'image' ) b = cv2 . getTrackbarPos ( 'B' , 'image' ) img [:] = [ b , g , r ] for i in range ( len ( points ) - 1 ): cv2 . line ( img , points [ i ], points [ i + 1 ],( 255 , 255 , 255 ), 5 ) if cv2 . waitKey ( 10 ) == 27 : # ESC\u6309\u952e\u952e\u7801\u4e3a27,\u5373\u6309ESC\u540e\u9000\u51fa break cv2 . imshow ( 'image' , img ) cv2 . destroyAllWindows () Example 6 GUI\u793a\u4f8b\u6548\u679c\u5c55\u793a 1- \u56de\u8c03\u51fd\u6570 \u56de\u8c03\u51fd\u6570\u5373\u56de\u5934\u8c03\u7528\u7684\u51fd\u6570\uff0c\u4e3b\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5728\u8c03\u7528\u4f20\u8fdb\u6765\u7684\u51fd\u6570\u3002\u5f53\u7279\u5b9a\u7684\u4e8b\u4ef6\u6216\u6761\u4ef6\u53d1\u751f\u7684\u65f6\u5019\uff0c\u8c03\u7528\u8005\u4f7f\u7528\u51fd\u6570\u6307\u9488\u8c03\u7528\u56de\u8c03\u51fd\u6570\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5904\u7406 \u5e38\u7528\u9f20\u6807\u54cd\u5e94\u4e8b\u4ef6 \u5e8f\u53f7 \u5173\u952e\u5b57 \u5c5e\u6027 1 EVENT_LBUTTONDOWN \u9f20\u6807\u5de6\u51fb 2 EVENT_RBUTTONDOWN \u9f20\u6807\u53f3\u51fb 3 EVENT_MOUSEMOVE \u9f20\u6807\u79fb\u52a8 4 EVENT_LBUTTONUP \u5de6\u952e\u91ca\u653e 5 EVENT_RBUTTONUP \u53f3\u952e\u91ca\u653e 6 EVENT_LBUTTONDBLCLK \u5de6\u952e\u53cc\u51fb 7 EVENT_RBUTTONDBLCLK \u53f3\u952e\u53cc\u51fb","title":"Example 6"},{"location":"2019_summer/opencv/video2image/","text":"opencv \u5e38\u7528\u7a0b\u5e8f\uff08\u4e00\uff09 \u00b6 \u7248\u672c\u4fe1\u606f Created by \u5f20\u5fd7\u521a 2019-09-25 20:14 Version 1.0.1 Last Update\uff1a2019-09-27 10:01 \u672c\u9875\u4ecb\u7ecd\u4e86\u5229\u7528Opencv\u8fdb\u884c\uff1a \u89c6\u9891\u5206\u89e3\u4e3a\u56fe\u7247; \u7ed9\u56fe\u7247\u6253\u9a6c\u8d5b\u514b; \u56fe\u7247\u7f29\u653e; \u7ed8\u5236\u76f4\u65b9\u56fe; \u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe; \u89c6\u9891\u5206\u89e3\u4e3a\u56fe\u7247 \u00b6 \u4ee3\u7801\u793a\u4f8b ''' Example: \u89c6\u9891\u5206\u89e3\u4e3a\u56fe\u7247 ''' import cv2 # \u89c6\u9891\u8bfb\u5165 # \u8bfb\u5165\u672c\u5730\u89c6\u9891\u6587\u4ef6 cap = cv2 . VideoCapture ( \"path\" ) # \u5224\u65ad\u80fd\u5426\u8bfb\u53d6\u89c6\u9891 isOpened = cap . isOpened print ( \"Video is opened:\" , isOpened ) #\u83b7\u53d6\u603b\u5e27\u6570 total = cap . get ( cv2 . CAP_PROP_FRAME_COUNT ) Print ( total ) #\u83b7\u53d6\u6bcf\u79d2\u5e27\u6570 fps = cap . get ( cv2 . CAP_PROP_FPS ) print ( fps ) # \u83b7\u53d6\u6bcf\u4e00\u5e27\u56fe\u7247\u7684\u5bbd\u9ad8 width = int ( cap . get ( cv2 . CAP_PROP_FRAME_WIDTH )) height = int ( cap . get ( cv2 . CAP_PROP_FRAME_HEIGHT )) print ( width , height ) i = 0 # \u8bbe\u7f6e\u95f4\u9694\u5e27\u6570 apart = xx while ( isOpened ): # \u8bbe\u7f6e\u7ec8\u6b62\u5e27\u6570 if i == total : break else : i = i + 1 # \u4ece\u89c6\u9891\u6d41\u4e2d\u8bfb\u53d6\u4e00\u5e27\u56fe\u50cf ( frag , frame ) = cap . read () #\u7ed9\u8bfb\u53d6\u51fa\u7684\u56fe\u50cf\u547d\u540d filename = \"image\" + str ( i ) if frag == True and i % apart == 0 : print ( filename ) # \u56fe\u7247\u4fdd\u5b58 cv2 . imwrite ( 'savepath' , frame ) print ( \"end\" ) \u5173\u952e\u8bed\u53e5 1- \u89c6\u9891\u8bfb\u5165 # \u89c6\u9891\u8bfb\u5165\uff0c\u5bfc\u5165\u672c\u5730\u89c6\u9891\u6587\u4ef6\uff0cpath\u4e3a\u672c\u5730\u89c6\u9891\u6587\u4ef6\u5730\u5740 cap = cv2 . VideoCapture ( \"path\" ) 2- \u83b7\u53d6\u89c6\u9891\u4fe1\u606f # \u5224\u65ad\u80fd\u5426\u8bfb\u53d6\u89c6\u9891 isOpened = cap . isOpened print ( isOpened ) #\u82e5\u4e0d\u80fd\u8bfb\u53d6\uff0c\u5219\u6253\u5370\u51fa\u7684\u662fFlase #\u83b7\u53d6\u603b\u5e27\u6570 total = cap . get ( cv2 . CAP_PROP_FRAME_COUNT ) Print ( total ) #\u83b7\u53d6\u6bcf\u79d2\u5e27\u6570 fps = cap . get ( cv2 . CAP_PROP_FPS ) print ( fps ) # \u83b7\u53d6\u6bcf\u4e00\u5e27\u56fe\u7247\u7684\u5bbd\u9ad8 width = int ( cap . get ( cv2 . CAP_PROP_FRAME_WIDTH )) height = int ( cap . get ( cv2 . CAP_PROP_FRAME_HEIGHT )) print ( width , height ) 3- \u8bbe\u7f6e\u95f4\u9694\u5e27\u6570apart\uff0c\u548c\u7ec8\u6b62\u5e27\u6570i # \u8bbe\u7f6e\u95f4\u9694\u5e27\u6570 apart = xx # \u8bbe\u7f6e\u7ec8\u6b62\u5e27\u6570\uff0c\u82e5\u5927\u4e8e\u603b\u5e27\u6570\uff0c\u5219\u63d0\u524d\u505c\u6b62 if i == xx : break 4- \u56fe\u7247\u4fdd\u5b58\uff0csavepath\u4e3a\u4fdd\u5b58\u5730\u5740 # \u56fe\u7247\u4fdd\u5b58 cv2 . imwrite ( 'savepath' , frame ) \u6ce8\u610f \u6587\u4ef6\u8bfb\u5165\u4e0e\u4fdd\u5b58\u8def\u5f84\u4e0d\u8981\u5305\u542b\u4e2d\u6587\u5b57\u7b26; \u7ed9\u56fe\u7247\u6253\u9a6c\u8d5b\u514b \u00b6 \u4ee3\u7801\u793a\u4f8b ''' Example:\u7ed9\u56fe\u7247\u6253\u9a6c\u8d5b\u514b ''' import cv2 img = cv2 . imread ( 'imagepath' ) #\u8bfb\u53d6\u56fe\u7247\uff0cimagepath\u4e3a\u56fe\u7247\u5730\u5740 cv2 . imshow ( 'src' , img ) #\u663e\u793a\u539f\u56fe\u7247\uff0csrc\u53ef\u81ea\u5df1\u547d\u540d imginfo = img . shape #\u83b7\u53d6\u56fe\u7247\u4fe1\u606f height = imginfo [ 0 ] width = imginfo [ 1 ] mode = imginfo [ 2 ] print ( height , width , mode ) ( x1 , y1 ) = ( 100 , 100 ) #\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u8d77\u59cb\u4f4d\u7f6e ( x2 , y2 ) = ( 300 , 300 ) #\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7ed3\u675f\u4e3a\u6b62 degree = 10 #\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7a0b\u5ea6 for m in range ( x1 , x2 ): for n in range ( y1 , y2 ): if m % degree == 0 and n % degree == 0 : for i in range ( 0 , degree ): for j in range ( 0 , degree ): ( b , g , r ) = img [ m , n ] img [ i + m , j + n ] = ( b , g , r ) cv2 . imshow ( '2' , img ) cv2 . waitKey ( 0 ) \u5173\u952e\u8bed\u53e5 1- \u8bbe\u7f6e\u9a6c\u8d5b\u514b\u4f4d\u7f6e\uff0c\u6839\u636e\u5b9e\u9645\u9700\u6c42\u81ea\u5df1\u8bbe\u5b9a python (x1,y1)=(100,100)#\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u8d77\u59cb\u4f4d\u7f6e (x2,y2)=(300,300)#\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7ed3\u675f\u4f4d\u7f6e 2- \u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7a0b\u5ea6\uff0c10\u8868\u793a10*10\u7684\u50cf\u7d20\u8fdb\u884c\u50cf\u7d20\u540c\u4e00\u5316 python degree=10#\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7a0b\u5ea6 \u56fe\u7247\u7f29\u653e \u00b6 \u4ee3\u7801\u793a\u4f8b ''' Example:\u56fe\u7247\u7f29\u653e ''' import cv2 img = cv2 . imread ( 'imagepath' ) #\u8bfb\u53d6\u56fe\u7247\uff0cimagepath\u4e3a\u56fe\u7247\u5730\u5740 cv2 . imshow ( 'src' , img ) #\u663e\u793a\u539f\u56fe\u7247\uff0csrc\u53ef\u81ea\u5df1\u547d\u540d imginfo = img . shape #\u83b7\u53d6\u56fe\u7247\u4fe1\u606f width = imginfo [ 0 ] height = imginfo [ 1 ] mode = imginfo [ 2 ] print ( width , height , mode ) #\u6253\u5370\u56fe\u7247\u4fe1\u606f dstwidth = 500 #\u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u5bbd\u5ea6 dstheight = 500 #\u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u9ad8\u5ea6 dst = cv2 . resize ( img ,( dstwidth , dstheight )) #\u5c06\u56fe\u7247\u7f29\u653e\u5230\u671f\u671b\u5c3a\u5bf8 cv2 . imshow ( 'dst' , dst ) #\u663e\u793a\u5904\u7406\u540e\u7684\u7167\u7247\uff0cdst\u53ef\u81ea\u5df1\u547d\u540d cv2 . waitKey ( 0 ) \u5173\u952e\u8bed\u53e5 1- \u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u5c3a\u5bf8\uff0c\u6839\u636e\u5b9e\u9645\u9700\u6c42\u81ea\u5df1\u8bbe\u5b9a python dstwidth=500 #\u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u5bbd\u5ea6 dstheight=500 #\u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u9ad8\u5ea6 2- \u5bf9\u56fe\u7247\u8fdb\u884c\u7f29\u653e python dst=cv2.resize(img,(dstwidth,dstheight))#\u5c06\u56fe\u7247\u7f29\u653e\u5230\u671f\u671b\u5c3a\u5bf8 \u7ed8\u5236\u76f4\u65b9\u56fe \u00b6 \u4ee3\u7801\u793a\u4f8b ''' Example:\u7ed8\u5236\u76f4\u65b9\u56fe ''' import cv2 import matplotlib.pyplot as plt img = cv2 . imread ( 'imagepath' ) #\u5bfc\u5165\u56fe\u7247 histb = cv2 . calcHist ([ img ],[ 0 ], None ,[ 256 ],[ 0 , 255 ]) histg = cv2 . calcHist ([ img ],[ 1 ], None ,[ 256 ],[ 0 , 255 ]) histr = cv2 . calcHist ([ img ],[ 2 ], None ,[ 256 ],[ 0 , 255 ]) plt . plot ( histb , color = 'b' ) plt . plot ( histg , color = 'g' ) plt . plot ( histr , color = 'r' ) plt . show () \u5173\u952e\u8bed\u53e5 1- \u8bbe\u7f6e\u76f4\u65b9\u56fe histb = cv2 . calcHist ([ img ],[ 0 ], None ,[ 256 ],[ 0 , 255 ]) histg = cv2 . calcHist ([ img ],[ 1 ], None ,[ 256 ],[ 0 , 255 ]) histr = cv2 . calcHist ([ img ],[ 2 ], None ,[ 256 ],[ 0 , 255 ]) #\u7b2c\u4e00\u4e2a\u53c2\u6570\u201c[img]\u201d\u8868\u793a\u8981\u7ed8\u5236\u76f4\u65b9\u56fe\u7684\u539f\u59cb\u56fe\u50cf\uff0c\u662f\u4f7f\u7528\u201c[]\u201d\u62ec\u8d77\u6765\u7684\u3002 #\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u8981\u7edf\u8ba1\u54ea\u4e2a\u901a\u9053\u7684\u76f4\u65b9\u56fe\u3002 #\u7b2c\u4e09\u4e2a\u662f\u63a9\u6a21\u56fe\u50cf\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a\u201cNone\u201d\uff0c\u8868\u793a\u8ba1\u7b97\u6574\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u3002 #\u7b2c\u56db\u4e2a\u53c2\u6570\u201c[256]\u201d\u8868\u793aBINS\u7684\u503c\u662f256\u3002BINS\u7684\u5177\u4f53\u6307\uff0c\u8868\u793a\u7070\u5ea6\u7ea7\u7684\u5206\u7ec4\u60c5\u51b5\u3002 #\u7b2c\u4e94\u4e2a\u53c2\u6570\u201c[0\uff0c255]\u201d\u8868\u793a\u7070\u5ea6\u7ea7\u7684\u8303\u56f4\u662f[0,255]\u3002 2- \u7ed8\u5236\u76f4\u65b9\u56fe plt . plot ( histb , color = 'b' ) #\u201ccolor=\u2019b\u2019\u201d\u8868\u793a\u7ed8\u56fe\u989c\u8272\u662f\u84dd\u8272 plt . plot ( histg , color = 'g' ) #\u201ccolor=\u2019g\u2019\u201d\u8868\u793a\u7ed8\u56fe\u989c\u8272\u662f\u7eff\u8272 plt . plot ( histr , color = 'r' ) #\u201ccolor=\u2019r\u2019\u201d\u8868\u793a\u7ed8\u56fe\u989c\u8272\u662f\u7ea2\u8272 \u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe \u00b6 \u4ee3\u7801\u793a\u4f8b ''' Example:\u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe ''' import cv2 import numpy as np import matplotlib.pyplot as plt img = cv2 . imread ( 'imagepath' ) gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) print ( img . shape ) mask = np . zeros ( gray . shape , np . uint8 ) #\u914d\u7f6e\u4e00\u4e2a\u63a9\u6a21\u77e9\u9635 mask [ 10 : 100 , 20 : 100 ] = 255 histb = cv2 . calcHist ([ gray ],[ 0 ], None ,[ 256 ],[ 0 , 255 ]) #\u7ed8\u5236\u539f\u59cb\u76f4\u65b9\u56fe histb1 = cv2 . calcHist ([ gray ],[ 0 ], mask ,[ 256 ],[ 0 , 255 ]) #\u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe plt . plot ( histb , color = 'b' ) plt . plot ( histb1 , color = 'g' ) plt . show () \u5173\u952e\u8bed\u53e5 1- \u8bbe\u7f6e\u63a9\u6a21\u77e9\u9635 mask = np . zeros ( gray . shape , np . uint8 ) #\u914d\u7f6e\u4e00\u4e2a\u63a9\u6a21\u77e9\u9635 mask [ 10 : 100 , 20 : 100 ] = 255 #\u6b64\u4f8b\u5b50\u4e2d\u4e3a\uff0810\uff0c20\uff09\u81f3\uff08100\uff0c100\uff09\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u81ea\u5b9a\u4e49 2- \u7ed8\u5236\u76f4\u65b9\u56fe histb = cv2 . calcHist ([ gray ],[ 0 ], None ,[ 256 ],[ 0 , 255 ]) #\u7ed8\u5236\u539f\u59cb\u76f4\u65b9\u56fe histb1 = cv2 . calcHist ([ gray ],[ 0 ], mask ,[ 256 ],[ 0 , 255 ]) #\u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe","title":"opencv \u5e38\u7528\u7a0b\u5e8f\uff08\u4e00\uff09"},{"location":"2019_summer/opencv/video2image/#opencv","text":"\u7248\u672c\u4fe1\u606f Created by \u5f20\u5fd7\u521a 2019-09-25 20:14 Version 1.0.1 Last Update\uff1a2019-09-27 10:01 \u672c\u9875\u4ecb\u7ecd\u4e86\u5229\u7528Opencv\u8fdb\u884c\uff1a \u89c6\u9891\u5206\u89e3\u4e3a\u56fe\u7247; \u7ed9\u56fe\u7247\u6253\u9a6c\u8d5b\u514b; \u56fe\u7247\u7f29\u653e; \u7ed8\u5236\u76f4\u65b9\u56fe; \u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe;","title":"opencv \u5e38\u7528\u7a0b\u5e8f\uff08\u4e00\uff09"},{"location":"2019_summer/opencv/video2image/#_1","text":"\u4ee3\u7801\u793a\u4f8b ''' Example: \u89c6\u9891\u5206\u89e3\u4e3a\u56fe\u7247 ''' import cv2 # \u89c6\u9891\u8bfb\u5165 # \u8bfb\u5165\u672c\u5730\u89c6\u9891\u6587\u4ef6 cap = cv2 . VideoCapture ( \"path\" ) # \u5224\u65ad\u80fd\u5426\u8bfb\u53d6\u89c6\u9891 isOpened = cap . isOpened print ( \"Video is opened:\" , isOpened ) #\u83b7\u53d6\u603b\u5e27\u6570 total = cap . get ( cv2 . CAP_PROP_FRAME_COUNT ) Print ( total ) #\u83b7\u53d6\u6bcf\u79d2\u5e27\u6570 fps = cap . get ( cv2 . CAP_PROP_FPS ) print ( fps ) # \u83b7\u53d6\u6bcf\u4e00\u5e27\u56fe\u7247\u7684\u5bbd\u9ad8 width = int ( cap . get ( cv2 . CAP_PROP_FRAME_WIDTH )) height = int ( cap . get ( cv2 . CAP_PROP_FRAME_HEIGHT )) print ( width , height ) i = 0 # \u8bbe\u7f6e\u95f4\u9694\u5e27\u6570 apart = xx while ( isOpened ): # \u8bbe\u7f6e\u7ec8\u6b62\u5e27\u6570 if i == total : break else : i = i + 1 # \u4ece\u89c6\u9891\u6d41\u4e2d\u8bfb\u53d6\u4e00\u5e27\u56fe\u50cf ( frag , frame ) = cap . read () #\u7ed9\u8bfb\u53d6\u51fa\u7684\u56fe\u50cf\u547d\u540d filename = \"image\" + str ( i ) if frag == True and i % apart == 0 : print ( filename ) # \u56fe\u7247\u4fdd\u5b58 cv2 . imwrite ( 'savepath' , frame ) print ( \"end\" ) \u5173\u952e\u8bed\u53e5 1- \u89c6\u9891\u8bfb\u5165 # \u89c6\u9891\u8bfb\u5165\uff0c\u5bfc\u5165\u672c\u5730\u89c6\u9891\u6587\u4ef6\uff0cpath\u4e3a\u672c\u5730\u89c6\u9891\u6587\u4ef6\u5730\u5740 cap = cv2 . VideoCapture ( \"path\" ) 2- \u83b7\u53d6\u89c6\u9891\u4fe1\u606f # \u5224\u65ad\u80fd\u5426\u8bfb\u53d6\u89c6\u9891 isOpened = cap . isOpened print ( isOpened ) #\u82e5\u4e0d\u80fd\u8bfb\u53d6\uff0c\u5219\u6253\u5370\u51fa\u7684\u662fFlase #\u83b7\u53d6\u603b\u5e27\u6570 total = cap . get ( cv2 . CAP_PROP_FRAME_COUNT ) Print ( total ) #\u83b7\u53d6\u6bcf\u79d2\u5e27\u6570 fps = cap . get ( cv2 . CAP_PROP_FPS ) print ( fps ) # \u83b7\u53d6\u6bcf\u4e00\u5e27\u56fe\u7247\u7684\u5bbd\u9ad8 width = int ( cap . get ( cv2 . CAP_PROP_FRAME_WIDTH )) height = int ( cap . get ( cv2 . CAP_PROP_FRAME_HEIGHT )) print ( width , height ) 3- \u8bbe\u7f6e\u95f4\u9694\u5e27\u6570apart\uff0c\u548c\u7ec8\u6b62\u5e27\u6570i # \u8bbe\u7f6e\u95f4\u9694\u5e27\u6570 apart = xx # \u8bbe\u7f6e\u7ec8\u6b62\u5e27\u6570\uff0c\u82e5\u5927\u4e8e\u603b\u5e27\u6570\uff0c\u5219\u63d0\u524d\u505c\u6b62 if i == xx : break 4- \u56fe\u7247\u4fdd\u5b58\uff0csavepath\u4e3a\u4fdd\u5b58\u5730\u5740 # \u56fe\u7247\u4fdd\u5b58 cv2 . imwrite ( 'savepath' , frame ) \u6ce8\u610f \u6587\u4ef6\u8bfb\u5165\u4e0e\u4fdd\u5b58\u8def\u5f84\u4e0d\u8981\u5305\u542b\u4e2d\u6587\u5b57\u7b26;","title":"\u89c6\u9891\u5206\u89e3\u4e3a\u56fe\u7247"},{"location":"2019_summer/opencv/video2image/#_2","text":"\u4ee3\u7801\u793a\u4f8b ''' Example:\u7ed9\u56fe\u7247\u6253\u9a6c\u8d5b\u514b ''' import cv2 img = cv2 . imread ( 'imagepath' ) #\u8bfb\u53d6\u56fe\u7247\uff0cimagepath\u4e3a\u56fe\u7247\u5730\u5740 cv2 . imshow ( 'src' , img ) #\u663e\u793a\u539f\u56fe\u7247\uff0csrc\u53ef\u81ea\u5df1\u547d\u540d imginfo = img . shape #\u83b7\u53d6\u56fe\u7247\u4fe1\u606f height = imginfo [ 0 ] width = imginfo [ 1 ] mode = imginfo [ 2 ] print ( height , width , mode ) ( x1 , y1 ) = ( 100 , 100 ) #\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u8d77\u59cb\u4f4d\u7f6e ( x2 , y2 ) = ( 300 , 300 ) #\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7ed3\u675f\u4e3a\u6b62 degree = 10 #\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7a0b\u5ea6 for m in range ( x1 , x2 ): for n in range ( y1 , y2 ): if m % degree == 0 and n % degree == 0 : for i in range ( 0 , degree ): for j in range ( 0 , degree ): ( b , g , r ) = img [ m , n ] img [ i + m , j + n ] = ( b , g , r ) cv2 . imshow ( '2' , img ) cv2 . waitKey ( 0 ) \u5173\u952e\u8bed\u53e5 1- \u8bbe\u7f6e\u9a6c\u8d5b\u514b\u4f4d\u7f6e\uff0c\u6839\u636e\u5b9e\u9645\u9700\u6c42\u81ea\u5df1\u8bbe\u5b9a python (x1,y1)=(100,100)#\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u8d77\u59cb\u4f4d\u7f6e (x2,y2)=(300,300)#\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7ed3\u675f\u4f4d\u7f6e 2- \u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7a0b\u5ea6\uff0c10\u8868\u793a10*10\u7684\u50cf\u7d20\u8fdb\u884c\u50cf\u7d20\u540c\u4e00\u5316 python degree=10#\u8bbe\u7f6e\u9a6c\u8d5b\u514b\u7a0b\u5ea6","title":"\u7ed9\u56fe\u7247\u6253\u9a6c\u8d5b\u514b"},{"location":"2019_summer/opencv/video2image/#_3","text":"\u4ee3\u7801\u793a\u4f8b ''' Example:\u56fe\u7247\u7f29\u653e ''' import cv2 img = cv2 . imread ( 'imagepath' ) #\u8bfb\u53d6\u56fe\u7247\uff0cimagepath\u4e3a\u56fe\u7247\u5730\u5740 cv2 . imshow ( 'src' , img ) #\u663e\u793a\u539f\u56fe\u7247\uff0csrc\u53ef\u81ea\u5df1\u547d\u540d imginfo = img . shape #\u83b7\u53d6\u56fe\u7247\u4fe1\u606f width = imginfo [ 0 ] height = imginfo [ 1 ] mode = imginfo [ 2 ] print ( width , height , mode ) #\u6253\u5370\u56fe\u7247\u4fe1\u606f dstwidth = 500 #\u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u5bbd\u5ea6 dstheight = 500 #\u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u9ad8\u5ea6 dst = cv2 . resize ( img ,( dstwidth , dstheight )) #\u5c06\u56fe\u7247\u7f29\u653e\u5230\u671f\u671b\u5c3a\u5bf8 cv2 . imshow ( 'dst' , dst ) #\u663e\u793a\u5904\u7406\u540e\u7684\u7167\u7247\uff0cdst\u53ef\u81ea\u5df1\u547d\u540d cv2 . waitKey ( 0 ) \u5173\u952e\u8bed\u53e5 1- \u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u5c3a\u5bf8\uff0c\u6839\u636e\u5b9e\u9645\u9700\u6c42\u81ea\u5df1\u8bbe\u5b9a python dstwidth=500 #\u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u5bbd\u5ea6 dstheight=500 #\u8bbe\u7f6e\u671f\u671b\u7684\u56fe\u7247\u9ad8\u5ea6 2- \u5bf9\u56fe\u7247\u8fdb\u884c\u7f29\u653e python dst=cv2.resize(img,(dstwidth,dstheight))#\u5c06\u56fe\u7247\u7f29\u653e\u5230\u671f\u671b\u5c3a\u5bf8","title":"\u56fe\u7247\u7f29\u653e"},{"location":"2019_summer/opencv/video2image/#_4","text":"\u4ee3\u7801\u793a\u4f8b ''' Example:\u7ed8\u5236\u76f4\u65b9\u56fe ''' import cv2 import matplotlib.pyplot as plt img = cv2 . imread ( 'imagepath' ) #\u5bfc\u5165\u56fe\u7247 histb = cv2 . calcHist ([ img ],[ 0 ], None ,[ 256 ],[ 0 , 255 ]) histg = cv2 . calcHist ([ img ],[ 1 ], None ,[ 256 ],[ 0 , 255 ]) histr = cv2 . calcHist ([ img ],[ 2 ], None ,[ 256 ],[ 0 , 255 ]) plt . plot ( histb , color = 'b' ) plt . plot ( histg , color = 'g' ) plt . plot ( histr , color = 'r' ) plt . show () \u5173\u952e\u8bed\u53e5 1- \u8bbe\u7f6e\u76f4\u65b9\u56fe histb = cv2 . calcHist ([ img ],[ 0 ], None ,[ 256 ],[ 0 , 255 ]) histg = cv2 . calcHist ([ img ],[ 1 ], None ,[ 256 ],[ 0 , 255 ]) histr = cv2 . calcHist ([ img ],[ 2 ], None ,[ 256 ],[ 0 , 255 ]) #\u7b2c\u4e00\u4e2a\u53c2\u6570\u201c[img]\u201d\u8868\u793a\u8981\u7ed8\u5236\u76f4\u65b9\u56fe\u7684\u539f\u59cb\u56fe\u50cf\uff0c\u662f\u4f7f\u7528\u201c[]\u201d\u62ec\u8d77\u6765\u7684\u3002 #\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u8981\u7edf\u8ba1\u54ea\u4e2a\u901a\u9053\u7684\u76f4\u65b9\u56fe\u3002 #\u7b2c\u4e09\u4e2a\u662f\u63a9\u6a21\u56fe\u50cf\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a\u201cNone\u201d\uff0c\u8868\u793a\u8ba1\u7b97\u6574\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u3002 #\u7b2c\u56db\u4e2a\u53c2\u6570\u201c[256]\u201d\u8868\u793aBINS\u7684\u503c\u662f256\u3002BINS\u7684\u5177\u4f53\u6307\uff0c\u8868\u793a\u7070\u5ea6\u7ea7\u7684\u5206\u7ec4\u60c5\u51b5\u3002 #\u7b2c\u4e94\u4e2a\u53c2\u6570\u201c[0\uff0c255]\u201d\u8868\u793a\u7070\u5ea6\u7ea7\u7684\u8303\u56f4\u662f[0,255]\u3002 2- \u7ed8\u5236\u76f4\u65b9\u56fe plt . plot ( histb , color = 'b' ) #\u201ccolor=\u2019b\u2019\u201d\u8868\u793a\u7ed8\u56fe\u989c\u8272\u662f\u84dd\u8272 plt . plot ( histg , color = 'g' ) #\u201ccolor=\u2019g\u2019\u201d\u8868\u793a\u7ed8\u56fe\u989c\u8272\u662f\u7eff\u8272 plt . plot ( histr , color = 'r' ) #\u201ccolor=\u2019r\u2019\u201d\u8868\u793a\u7ed8\u56fe\u989c\u8272\u662f\u7ea2\u8272","title":"\u7ed8\u5236\u76f4\u65b9\u56fe"},{"location":"2019_summer/opencv/video2image/#_5","text":"\u4ee3\u7801\u793a\u4f8b ''' Example:\u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe ''' import cv2 import numpy as np import matplotlib.pyplot as plt img = cv2 . imread ( 'imagepath' ) gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) print ( img . shape ) mask = np . zeros ( gray . shape , np . uint8 ) #\u914d\u7f6e\u4e00\u4e2a\u63a9\u6a21\u77e9\u9635 mask [ 10 : 100 , 20 : 100 ] = 255 histb = cv2 . calcHist ([ gray ],[ 0 ], None ,[ 256 ],[ 0 , 255 ]) #\u7ed8\u5236\u539f\u59cb\u76f4\u65b9\u56fe histb1 = cv2 . calcHist ([ gray ],[ 0 ], mask ,[ 256 ],[ 0 , 255 ]) #\u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe plt . plot ( histb , color = 'b' ) plt . plot ( histb1 , color = 'g' ) plt . show () \u5173\u952e\u8bed\u53e5 1- \u8bbe\u7f6e\u63a9\u6a21\u77e9\u9635 mask = np . zeros ( gray . shape , np . uint8 ) #\u914d\u7f6e\u4e00\u4e2a\u63a9\u6a21\u77e9\u9635 mask [ 10 : 100 , 20 : 100 ] = 255 #\u6b64\u4f8b\u5b50\u4e2d\u4e3a\uff0810\uff0c20\uff09\u81f3\uff08100\uff0c100\uff09\uff0c\u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u81ea\u5b9a\u4e49 2- \u7ed8\u5236\u76f4\u65b9\u56fe histb = cv2 . calcHist ([ gray ],[ 0 ], None ,[ 256 ],[ 0 , 255 ]) #\u7ed8\u5236\u539f\u59cb\u76f4\u65b9\u56fe histb1 = cv2 . calcHist ([ gray ],[ 0 ], mask ,[ 256 ],[ 0 , 255 ]) #\u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe","title":"\u7ed8\u5236\u63a9\u6a21\u76f4\u65b9\u56fe"},{"location":"2019_summer/temp/tmp/","text":"","title":"Tmp"}]}